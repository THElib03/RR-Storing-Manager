package Main;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author theli
 */
public class MainW extends javax.swing.JFrame {
    public MainW() throws IOException{

        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/6.png")));
        initListeners();
        resetVisibility();
        
        bridge = new SQLBridge("cooperativa.db");
        bridge.startConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainWLayerPane = new javax.swing.JLayeredPane();
        MainMenuPane = new javax.swing.JPanel();
        MainMenuIconLabel = new javax.swing.JLabel();
        ResTablePane = new javax.swing.JPanel();
        ResTableLateralPanel = new javax.swing.JPanel();
        ResTableAddBut = new javax.swing.JButton();
        ResTableModifyBut = new javax.swing.JButton();
        ResTableRemoveBut = new javax.swing.JButton();
        ResTableBackBut = new javax.swing.JButton();
        ResTableSeparator = new javax.swing.JSeparator();
        ResTableScrollPane = new javax.swing.JScrollPane();
        ResTable = new javax.swing.JTable();
        ResAddPane = new javax.swing.JPanel();
        ResAddSeparator = new javax.swing.JSeparator();
        ResAddHellPanel = new javax.swing.JPanel();
        ResAddCancelBut = new javax.swing.JButton();
        ResAddConfirmBut = new javax.swing.JButton();
        ResAddHeavenPanel = new javax.swing.JPanel();
        ResAddIDLabel = new javax.swing.JLabel();
        ResAddIDInput = new javax.swing.JTextField();
        ResAddNameLabel = new javax.swing.JLabel();
        ResAddNameInput = new javax.swing.JTextField();
        ResAddStockLabel = new javax.swing.JLabel();
        ResAddStockInput = new javax.swing.JTextField();
        ResModifyPane = new javax.swing.JPanel();
        ResModifySeparator = new javax.swing.JSeparator();
        ResModifyHellPanel = new javax.swing.JPanel();
        ResModifyConfirmBut = new javax.swing.JButton();
        ResModifyCancelBut = new javax.swing.JButton();
        ResModifyHeavenPanel = new javax.swing.JPanel();
        ResModifyIDLabel = new javax.swing.JLabel();
        ResModifyIDInput = new javax.swing.JTextField();
        ResModifyNameLabel = new javax.swing.JLabel();
        ResModifyNameInput = new javax.swing.JTextField();
        ResModifyStockLabel = new javax.swing.JLabel();
        ResModifyStockInput = new javax.swing.JTextField();
        ResRemovePane = new javax.swing.JPanel();
        ResRemoveSeparator = new javax.swing.JSeparator();
        ResRemoveHellPanel = new javax.swing.JPanel();
        ResRemoveConfirmBut = new javax.swing.JButton();
        ResRemoveCancelBut = new javax.swing.JButton();
        ResRemoveHeavenPanel = new javax.swing.JPanel();
        ResRemoveIDLabel = new javax.swing.JLabel();
        ResRemoveIDInput = new javax.swing.JTextField();
        ResRemoveNameLabel = new javax.swing.JLabel();
        ResRemoveNameInput = new javax.swing.JTextField();
        ResRemoveStockLabel = new javax.swing.JLabel();
        ResRemoveStockInput = new javax.swing.JTextField();
        ResRemoveQuestionLabel = new javax.swing.JLabel();
        ResRemoveQuestion2Label = new javax.swing.JLabel();
        ResRemoveRadioYesBut = new javax.swing.JRadioButton();
        ResRemoveRadioNoBut = new javax.swing.JRadioButton();
        DonorTablePane = new javax.swing.JPanel();
        DonorTableLateralPanel = new javax.swing.JPanel();
        DonorTableAddBut = new javax.swing.JButton();
        DonorTableModifyBut = new javax.swing.JButton();
        DonorTableRemoveBut = new javax.swing.JButton();
        DonorTableIDSearchText = new javax.swing.JTextField();
        DonorTableNomSearchText = new javax.swing.JTextField();
        DonorTableBackBut = new javax.swing.JButton();
        DonorTableSeparator = new javax.swing.JSeparator();
        DonorTableScrollPane = new javax.swing.JScrollPane();
        DonorTable = new javax.swing.JTable();
        DonorAddPane = new javax.swing.JPanel();
        DonorAddLateralSeparator = new javax.swing.JSeparator();
        DonorAddHellPanel = new javax.swing.JPanel();
        DonorAddConfirmBut = new javax.swing.JButton();
        DonorAddCancelBut = new javax.swing.JButton();
        DonorAddHeavenPanel = new javax.swing.JPanel();
        DonorAddIDLabel = new javax.swing.JLabel();
        DonorAddIDInput = new javax.swing.JTextField();
        DonorAddNameLabel = new javax.swing.JLabel();
        DonorAddNameInput = new javax.swing.JTextField();
        DonorAddRateLabel = new javax.swing.JLabel();
        DonorAddRateInput = new javax.swing.JTextField();
        DonorModifyPane = new javax.swing.JPanel();
        DonorModifyLateralSeparator = new javax.swing.JSeparator();
        DonorModifyHellPanel = new javax.swing.JPanel();
        DonorModifyConfirmBut = new javax.swing.JButton();
        DonorModifyCancelBut = new javax.swing.JButton();
        DonorModifyHeavenPanel = new javax.swing.JPanel();
        DonorModifyIDLabel = new javax.swing.JLabel();
        DonorModifyIDInput = new javax.swing.JTextField();
        DonorModifyNameLabel = new javax.swing.JLabel();
        DonorModifyNameInput = new javax.swing.JTextField();
        DonorModifyRateLabel = new javax.swing.JLabel();
        DonorModifyRateInput = new javax.swing.JTextField();
        DonorRemovePane = new javax.swing.JPanel();
        DonorRemoveLateralSeparator = new javax.swing.JSeparator();
        DonorRemoveHellPanel = new javax.swing.JPanel();
        DonorRemoveConfirmBut = new javax.swing.JButton();
        DonorRemoveCancelBut = new javax.swing.JButton();
        DonorRemoveHeavenPanel = new javax.swing.JPanel();
        DonorRemoveIDLabel = new javax.swing.JLabel();
        DonorRemoveIDInput = new javax.swing.JTextField();
        DonorRemoveNameLabel = new javax.swing.JLabel();
        DonorRemoveNameInput = new javax.swing.JTextField();
        DonorRemoveRateLabel = new javax.swing.JLabel();
        DonorRemoveRateInput = new javax.swing.JTextField();
        DonorRemoveQuestionLabel = new javax.swing.JLabel();
        DonorRemoveQuestion2Label = new javax.swing.JLabel();
        DonorRemoveRadioYesBut = new javax.swing.JRadioButton();
        DonorRemoveRadioNoBut = new javax.swing.JRadioButton();
        DonaTablePane = new javax.swing.JPanel();
        DonaTableLateralPanel = new javax.swing.JPanel();
        DonaTableAddBut = new javax.swing.JButton();
        DonaTableModifyBut = new javax.swing.JButton();
        DonaTableRemoveBut = new javax.swing.JButton();
        DonaTableDonorSearchText = new javax.swing.JTextField();
        DonaTableMaterialSearchText = new javax.swing.JTextField();
        DonaTableDateSearchText = new javax.swing.JTextField();
        DonaTableBackBut = new javax.swing.JButton();
        DonaTableSeparator = new javax.swing.JSeparator();
        DonaTableScrollPane = new javax.swing.JScrollPane();
        DonaTable = new javax.swing.JTable();
        DonaAddPane = new javax.swing.JPanel();
        DonaAddLateralSeparator = new javax.swing.JSeparator();
        DonaAddHellPanel = new javax.swing.JPanel();
        DonaAddConfirmBut = new javax.swing.JButton();
        DonaAddCancelBut = new javax.swing.JButton();
        DonaAddHeavenPanel = new javax.swing.JPanel();
        DonaAddDonorLabel = new javax.swing.JLabel();
        DonaAddDonorInput = new javax.swing.JTextField();
        DonaAddResourceLabel = new javax.swing.JLabel();
        DonaAddResourceInput = new javax.swing.JTextField();
        DonaAddCuantityLabel = new javax.swing.JLabel();
        DonaAddCuantityInput = new javax.swing.JTextField();
        DonaAddPriceLabel = new javax.swing.JLabel();
        DonaAddPriceInput = new javax.swing.JTextField();
        DonaModifyPane = new javax.swing.JPanel();
        DonaModifyLateralSeparator = new javax.swing.JSeparator();
        DonaModifyHellPanel = new javax.swing.JPanel();
        DonaModifyConfirmBut = new javax.swing.JButton();
        DonaModifyCancelBut = new javax.swing.JButton();
        DonaModifyHeavenPanel = new javax.swing.JPanel();
        DonaModifyDonorLabel = new javax.swing.JLabel();
        DonaModifyDonorInput = new javax.swing.JTextField();
        DonaModifyResourceLabel = new javax.swing.JLabel();
        DonaModifyResourceInput = new javax.swing.JTextField();
        DonaModifyCuantityLabel = new javax.swing.JLabel();
        DonaModifyCuantityInput = new javax.swing.JTextField();
        DonaModifyPriceLabel = new javax.swing.JLabel();
        DonaModifyPriceInput = new javax.swing.JTextField();
        DonaRemovePane = new javax.swing.JPanel();
        DonaRemoveLateralSeparator = new javax.swing.JSeparator();
        DonaRemoveHellPanel = new javax.swing.JPanel();
        DonaRemoveConfirmBut = new javax.swing.JButton();
        DonaRemoveCancelBut = new javax.swing.JButton();
        DonaRemoveHeavenPanel = new javax.swing.JPanel();
        DonaRemoveDonorLabel = new javax.swing.JLabel();
        DonaRemoveDonorInput = new javax.swing.JTextField();
        DonaRemoveResourceLabel = new javax.swing.JLabel();
        DonaRemoveResourceInput = new javax.swing.JTextField();
        DonaRemoveCuantityLabel = new javax.swing.JLabel();
        DonaRemoveCuantityInput = new javax.swing.JTextField();
        DonaRemovePriceLabel = new javax.swing.JLabel();
        DonaRemovePriceInput = new javax.swing.JTextField();
        SaleTablePane = new javax.swing.JPanel();
        SaleTableLateralPanel = new javax.swing.JPanel();
        SaleTableAddBut = new javax.swing.JButton();
        SaleTableModifyBut = new javax.swing.JButton();
        SaleTableRemoveBut = new javax.swing.JButton();
        SaleTableResourceSearchInput = new javax.swing.JTextField();
        SaleTableFechaSearchInput = new javax.swing.JTextField();
        SaleTableBackBut = new javax.swing.JButton();
        SaleTableSeparator = new javax.swing.JSeparator();
        SaleTableScrollPane = new javax.swing.JScrollPane();
        SaleTable = new javax.swing.JTable();
        SaleAddPane = new javax.swing.JPanel();
        SaleAddLateralSeparator = new javax.swing.JSeparator();
        SaleAddHellPanel = new javax.swing.JPanel();
        SaleAddConfirmBut = new javax.swing.JButton();
        SaleAddCancelBut = new javax.swing.JButton();
        SaleAddHeavenPanel = new javax.swing.JPanel();
        SaleAddIDLabel = new javax.swing.JLabel();
        SaleAddIDInput = new javax.swing.JTextField();
        SaleAddResourceLabel = new javax.swing.JLabel();
        SaleAddResourceInput = new javax.swing.JTextField();
        SaleAddCuantityLabel = new javax.swing.JLabel();
        SaleAddCuantityInput = new javax.swing.JTextField();
        SaleAddPriceLabel = new javax.swing.JLabel();
        SaleAddPriceInput = new javax.swing.JTextField();
        SaleModifyPane = new javax.swing.JPanel();
        SaleModifyLateralSeparator = new javax.swing.JSeparator();
        SaleModifyHellPanel = new javax.swing.JPanel();
        SaleModifyConfirmBut = new javax.swing.JButton();
        SaleModifyCancelBut = new javax.swing.JButton();
        SaleModifyHeavenPanel = new javax.swing.JPanel();
        SaleModifyIDLabel = new javax.swing.JLabel();
        SaleModifyIDInput = new javax.swing.JTextField();
        SaleModifyResourceLabel = new javax.swing.JLabel();
        SaleModifyResourceInput = new javax.swing.JTextField();
        SaleModifyCuantityLabel = new javax.swing.JLabel();
        SaleModifyCuantityInput = new javax.swing.JTextField();
        SaleModifyPriceLabel = new javax.swing.JLabel();
        SaleModifyPriceInput = new javax.swing.JTextField();
        SaleRemovePane = new javax.swing.JPanel();
        SaleRemoveLateralSeparator = new javax.swing.JSeparator();
        SaleRemoveHellPanel = new javax.swing.JPanel();
        SaleRemoveConfirmBut = new javax.swing.JButton();
        SaleRemoveCancelBut = new javax.swing.JButton();
        SaleRemoveHeavenPanel = new javax.swing.JPanel();
        SaleRemoveIDLabel = new javax.swing.JLabel();
        SaleRemoveIDInput = new javax.swing.JTextField();
        SaleRemoveResourceLabel = new javax.swing.JLabel();
        SaleRemoveResourceInput = new javax.swing.JTextField();
        SaleRemoveCuantityLabel = new javax.swing.JLabel();
        SaleRemoveCuantityInput = new javax.swing.JTextField();
        SaleRemovePriceLabel = new javax.swing.JLabel();
        SaleRemovePriceInput = new javax.swing.JTextField();
        MainWMenuBar = new javax.swing.JMenuBar();
        ResTableMenu = new javax.swing.JMenu();
        DonorTableMenu = new javax.swing.JMenu();
        DonaTableMenu = new javax.swing.JMenu();
        SaleTableMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CooperativApp");
        setMinimumSize(new java.awt.Dimension(600, 480));
        setName("MainWFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 480));
        setResizable(false);
        getContentPane().setLayout(null);

        MainWLayerPane.setMinimumSize(new java.awt.Dimension(600, 425));

        MainMenuPane.setMaximumSize(new java.awt.Dimension(600, 425));
        MainMenuPane.setMinimumSize(new java.awt.Dimension(600, 425));
        MainMenuPane.setPreferredSize(new java.awt.Dimension(600, 425));
        MainMenuPane.setLayout(null);

        MainMenuIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MainMenuIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/6.png"))); // NOI18N
        MainMenuPane.add(MainMenuIconLabel);
        MainMenuIconLabel.setBounds(60, -30, 480, 480);

        MainWLayerPane.add(MainMenuPane);
        MainMenuPane.setBounds(0, 0, 600, 425);

        ResTablePane.setMaximumSize(new java.awt.Dimension(600, 430));
        ResTablePane.setMinimumSize(new java.awt.Dimension(600, 430));
        ResTablePane.setPreferredSize(new java.awt.Dimension(600, 430));
        ResTablePane.setLayout(null);

        ResTableLateralPanel.setMaximumSize(new java.awt.Dimension(430, 430));
        ResTableLateralPanel.setMinimumSize(new java.awt.Dimension(120, 425));
        ResTableLateralPanel.setLayout(null);

        ResTableAddBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ResTableAddBut.setText("Añadir");
        ResTableLateralPanel.add(ResTableAddBut);
        ResTableAddBut.setBounds(0, 10, 120, 30);

        ResTableModifyBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ResTableModifyBut.setText("Modificar");
        ResTableLateralPanel.add(ResTableModifyBut);
        ResTableModifyBut.setBounds(0, 60, 120, 30);

        ResTableRemoveBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ResTableRemoveBut.setText("Eliminar");
        ResTableLateralPanel.add(ResTableRemoveBut);
        ResTableRemoveBut.setBounds(0, 110, 120, 30);

        ResTableBackBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ResTableBackBut.setText("Volver");
        ResTableLateralPanel.add(ResTableBackBut);
        ResTableBackBut.setBounds(0, 370, 120, 30);

        ResTablePane.add(ResTableLateralPanel);
        ResTableLateralPanel.setBounds(0, 0, 120, 425);

        ResTableSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        ResTableSeparator.setMinimumSize(new java.awt.Dimension(20, 430));
        ResTableSeparator.setPreferredSize(new java.awt.Dimension(20, 430));
        ResTablePane.add(ResTableSeparator);
        ResTableSeparator.setBounds(120, 0, 20, 430);

        ResTableScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(214, 217, 223), 3));
        ResTableScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        ResTableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        ResTableScrollPane.setMinimumSize(new java.awt.Dimension(450, 415));
        ResTableScrollPane.setPreferredSize(new java.awt.Dimension(450, 415));

        ResTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ResTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Stock", "Última Donación"
            }
        )
        {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }
    );
    ResTable.setAutoscrolls(false);
    ResTable.setMinimumSize(new java.awt.Dimension(450, 415));
    ResTable.setPreferredSize(new java.awt.Dimension(450, 415));
    ResTable.setRowHeight(24);
    ResTable.setShowGrid(true);
    ResTableScrollPane.setViewportView(ResTable);

    ResTablePane.add(ResTableScrollPane);
    ResTableScrollPane.setBounds(130, 0, 450, 415);

    MainWLayerPane.add(ResTablePane);
    ResTablePane.setBounds(0, 0, 600, 430);

    ResAddPane.setMinimumSize(new java.awt.Dimension(600, 425));
    ResAddPane.setPreferredSize(new java.awt.Dimension(600, 425));
    ResAddPane.setLayout(null);

    ResAddSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    ResAddSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    ResAddSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    ResAddPane.add(ResAddSeparator);
    ResAddSeparator.setBounds(120, 0, 20, 425);

    ResAddHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    ResAddHellPanel.setLayout(null);

    ResAddCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResAddCancelBut.setText("Cancelar");
    ResAddCancelBut.setMaximumSize(new java.awt.Dimension(110, 30));
    ResAddCancelBut.setMinimumSize(new java.awt.Dimension(110, 30));
    ResAddCancelBut.setPreferredSize(new java.awt.Dimension(110, 30));
    ResAddHellPanel.add(ResAddCancelBut);
    ResAddCancelBut.setBounds(0, 370, 120, 30);

    ResAddConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResAddConfirmBut.setText("Confirmar");
    ResAddConfirmBut.setMaximumSize(new java.awt.Dimension(110, 24));
    ResAddConfirmBut.setMinimumSize(new java.awt.Dimension(110, 24));
    ResAddConfirmBut.setPreferredSize(new java.awt.Dimension(110, 30));
    ResAddHellPanel.add(ResAddConfirmBut);
    ResAddConfirmBut.setBounds(0, 320, 120, 30);

    ResAddPane.add(ResAddHellPanel);
    ResAddHellPanel.setBounds(0, 0, 120, 425);

    ResAddHeavenPanel.setMaximumSize(new java.awt.Dimension(600, 340));
    ResAddHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    ResAddHeavenPanel.setLayout(null);

    ResAddIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResAddIDLabel.setText("Identificador:");
    ResAddHeavenPanel.add(ResAddIDLabel);
    ResAddIDLabel.setBounds(80, 50, 150, 30);

    ResAddIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResAddHeavenPanel.add(ResAddIDInput);
    ResAddIDInput.setBounds(270, 50, 130, 30);

    ResAddNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResAddNameLabel.setText("Nombre:");
    ResAddHeavenPanel.add(ResAddNameLabel);
    ResAddNameLabel.setBounds(80, 130, 150, 30);

    ResAddNameInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResAddHeavenPanel.add(ResAddNameInput);
    ResAddNameInput.setBounds(270, 130, 130, 30);

    ResAddStockLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResAddStockLabel.setText("Stock restante:");
    ResAddHeavenPanel.add(ResAddStockLabel);
    ResAddStockLabel.setBounds(80, 210, 150, 30);

    ResAddStockInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResAddHeavenPanel.add(ResAddStockInput);
    ResAddStockInput.setBounds(270, 210, 130, 30);

    ResAddPane.add(ResAddHeavenPanel);
    ResAddHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(ResAddPane);
    ResAddPane.setBounds(0, 0, 600, 425);

    ResModifyPane.setMinimumSize(new java.awt.Dimension(600, 425));
    ResModifyPane.setLayout(null);

    ResModifySeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    ResModifySeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    ResModifySeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    ResModifyPane.add(ResModifySeparator);
    ResModifySeparator.setBounds(120, 0, 20, 425);

    ResModifyHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    ResModifyHellPanel.setPreferredSize(new java.awt.Dimension(120, 425));
    ResModifyHellPanel.setLayout(null);

    ResModifyConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResModifyConfirmBut.setText("Confirmar");
    ResModifyConfirmBut.setMaximumSize(new java.awt.Dimension(110, 24));
    ResModifyConfirmBut.setMinimumSize(new java.awt.Dimension(110, 24));
    ResModifyConfirmBut.setPreferredSize(new java.awt.Dimension(110, 30));
    ResModifyHellPanel.add(ResModifyConfirmBut);
    ResModifyConfirmBut.setBounds(0, 320, 120, 30);

    ResModifyCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResModifyCancelBut.setText("Cancelar");
    ResModifyCancelBut.setMaximumSize(new java.awt.Dimension(110, 30));
    ResModifyCancelBut.setMinimumSize(new java.awt.Dimension(110, 30));
    ResModifyCancelBut.setPreferredSize(new java.awt.Dimension(110, 30));
    ResModifyHellPanel.add(ResModifyCancelBut);
    ResModifyCancelBut.setBounds(0, 370, 120, 30);

    ResModifyPane.add(ResModifyHellPanel);
    ResModifyHellPanel.setBounds(0, 0, 120, 425);

    ResModifyHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    ResModifyHeavenPanel.setPreferredSize(new java.awt.Dimension(480, 425));
    ResModifyHeavenPanel.setLayout(null);

    ResModifyIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResModifyIDLabel.setText("Identificador:");
    ResModifyHeavenPanel.add(ResModifyIDLabel);
    ResModifyIDLabel.setBounds(80, 50, 200, 30);

    ResModifyIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResModifyHeavenPanel.add(ResModifyIDInput);
    ResModifyIDInput.setBounds(270, 50, 130, 30);

    ResModifyNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResModifyNameLabel.setText("Nuevo nombre:");
    ResModifyHeavenPanel.add(ResModifyNameLabel);
    ResModifyNameLabel.setBounds(80, 130, 200, 30);

    ResModifyNameInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResModifyHeavenPanel.add(ResModifyNameInput);
    ResModifyNameInput.setBounds(270, 130, 130, 30);

    ResModifyStockLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResModifyStockLabel.setText("Nuevo stock:");
    ResModifyHeavenPanel.add(ResModifyStockLabel);
    ResModifyStockLabel.setBounds(80, 210, 200, 30);

    ResModifyStockInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResModifyHeavenPanel.add(ResModifyStockInput);
    ResModifyStockInput.setBounds(270, 210, 130, 30);

    ResModifyPane.add(ResModifyHeavenPanel);
    ResModifyHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(ResModifyPane);
    ResModifyPane.setBounds(0, 0, 600, 425);

    ResRemovePane.setMinimumSize(new java.awt.Dimension(600, 425));
    ResRemovePane.setPreferredSize(new java.awt.Dimension(600, 425));
    ResRemovePane.setLayout(null);

    ResRemoveSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    ResRemoveSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    ResRemoveSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    ResRemovePane.add(ResRemoveSeparator);
    ResRemoveSeparator.setBounds(120, 0, 20, 425);

    ResRemoveHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    ResRemoveHellPanel.setPreferredSize(new java.awt.Dimension(120, 425));
    ResRemoveHellPanel.setRequestFocusEnabled(false);
    ResRemoveHellPanel.setLayout(null);

    ResRemoveConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveConfirmBut.setText("Confirmar");
    ResRemoveConfirmBut.setMaximumSize(new java.awt.Dimension(110, 24));
    ResRemoveConfirmBut.setMinimumSize(new java.awt.Dimension(110, 24));
    ResRemoveConfirmBut.setPreferredSize(new java.awt.Dimension(110, 30));
    ResRemoveHellPanel.add(ResRemoveConfirmBut);
    ResRemoveConfirmBut.setBounds(0, 320, 120, 30);

    ResRemoveCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveCancelBut.setText("Cancelar");
    ResRemoveCancelBut.setMaximumSize(new java.awt.Dimension(110, 30));
    ResRemoveCancelBut.setMinimumSize(new java.awt.Dimension(110, 30));
    ResRemoveCancelBut.setPreferredSize(new java.awt.Dimension(110, 30));
    ResRemoveHellPanel.add(ResRemoveCancelBut);
    ResRemoveCancelBut.setBounds(0, 370, 120, 30);

    ResRemovePane.add(ResRemoveHellPanel);
    ResRemoveHellPanel.setBounds(0, 0, 120, 425);

    ResRemoveHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    ResRemoveHeavenPanel.setPreferredSize(new java.awt.Dimension(480, 425));
    ResRemoveHeavenPanel.setLayout(null);

    ResRemoveIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveIDLabel.setText("Identificador:");
    ResRemoveHeavenPanel.add(ResRemoveIDLabel);
    ResRemoveIDLabel.setBounds(80, 50, 150, 30);

    ResRemoveIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveHeavenPanel.add(ResRemoveIDInput);
    ResRemoveIDInput.setBounds(270, 50, 130, 30);

    ResRemoveNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveNameLabel.setText("Nombre:");
    ResRemoveHeavenPanel.add(ResRemoveNameLabel);
    ResRemoveNameLabel.setBounds(80, 130, 150, 30);

    ResRemoveNameInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveHeavenPanel.add(ResRemoveNameInput);
    ResRemoveNameInput.setBounds(270, 130, 130, 30);

    ResRemoveStockLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveStockLabel.setText("Stock restante:");
    ResRemoveHeavenPanel.add(ResRemoveStockLabel);
    ResRemoveStockLabel.setBounds(80, 210, 150, 30);

    ResRemoveStockInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveHeavenPanel.add(ResRemoveStockInput);
    ResRemoveStockInput.setBounds(270, 210, 130, 30);

    ResRemoveQuestionLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveQuestionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    ResRemoveQuestionLabel.setText("¿Desea calcular la venta del");
    ResRemoveHeavenPanel.add(ResRemoveQuestionLabel);
    ResRemoveQuestionLabel.setBounds(130, 290, 220, 30);

    ResRemoveQuestion2Label.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveQuestion2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    ResRemoveQuestion2Label.setText("stock de este material?");
    ResRemoveHeavenPanel.add(ResRemoveQuestion2Label);
    ResRemoveQuestion2Label.setBounds(130, 310, 220, 30);

    ResRemoveRadioYesBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveRadioYesBut.setMnemonic('s');
    ResRemoveRadioYesBut.setText("Si");
    ResRemoveHeavenPanel.add(ResRemoveRadioYesBut);
    ResRemoveRadioYesBut.setBounds(150, 350, 50, 28);

    ResRemoveRadioNoBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResRemoveRadioNoBut.setMnemonic('n');
    ResRemoveRadioNoBut.setText("No");
    ResRemoveHeavenPanel.add(ResRemoveRadioNoBut);
    ResRemoveRadioNoBut.setBounds(280, 350, 50, 28);

    ResRemovePane.add(ResRemoveHeavenPanel);
    ResRemoveHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(ResRemovePane);
    ResRemovePane.setBounds(0, 0, 600, 425);

    DonorTablePane.setMinimumSize(new java.awt.Dimension(600, 425));
    DonorTablePane.setPreferredSize(new java.awt.Dimension(600, 425));
    DonorTablePane.setLayout(null);

    DonorTableLateralPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    DonorTableLateralPanel.setLayout(null);

    DonorTableAddBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorTableAddBut.setText("Añadir");
    DonorTableLateralPanel.add(DonorTableAddBut);
    DonorTableAddBut.setBounds(0, 10, 120, 30);

    DonorTableModifyBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorTableModifyBut.setText("Modificar");
    DonorTableLateralPanel.add(DonorTableModifyBut);
    DonorTableModifyBut.setBounds(0, 60, 120, 30);

    DonorTableRemoveBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorTableRemoveBut.setText("Eliminar");
    DonorTableLateralPanel.add(DonorTableRemoveBut);
    DonorTableRemoveBut.setBounds(0, 110, 120, 30);

    DonorTableIDSearchText.setText("Nombre");
    DonorTableLateralPanel.add(DonorTableIDSearchText);
    DonorTableIDSearchText.setBounds(0, 190, 120, 30);

    DonorTableNomSearchText.setText("Identificador");
    DonorTableLateralPanel.add(DonorTableNomSearchText);
    DonorTableNomSearchText.setBounds(0, 240, 120, 30);

    DonorTableBackBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorTableBackBut.setText("Volver");
    DonorTableLateralPanel.add(DonorTableBackBut);
    DonorTableBackBut.setBounds(0, 370, 120, 30);

    DonorTablePane.add(DonorTableLateralPanel);
    DonorTableLateralPanel.setBounds(0, 0, 120, 425);

    DonorTableSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    DonorTableSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    DonorTableSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    DonorTablePane.add(DonorTableSeparator);
    DonorTableSeparator.setBounds(120, 0, 20, 425);

    DonorTableScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(214, 217, 223), 3));
    DonorTableScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    DonorTableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    DonorTableScrollPane.setMinimumSize(new java.awt.Dimension(450, 415));
    DonorTableScrollPane.setPreferredSize(new java.awt.Dimension(450, 415));
    DonorTableScrollPane.setRequestFocusEnabled(false);

    DonorTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "ID", "Nombre", "Tasa", "Última Donación"
        }
    )
    {
        boolean[] canEdit = new boolean [] {
            false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    DonorTable.setMinimumSize(new java.awt.Dimension(450, 415));
    DonorTable.setPreferredSize(new java.awt.Dimension(450, 415));
    DonorTable.setRowHeight(24);
    DonorTable.setShowGrid(true);
    DonorTableScrollPane.setViewportView(DonorTable);

    DonorTablePane.add(DonorTableScrollPane);
    DonorTableScrollPane.setBounds(130, 0, 450, 415);

    MainWLayerPane.add(DonorTablePane);
    DonorTablePane.setBounds(0, 0, 600, 425);

    DonorAddPane.setMinimumSize(new java.awt.Dimension(600, 425));
    DonorAddPane.setLayout(null);

    DonorAddLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    DonorAddLateralSeparator.setMinimumSize(new java.awt.Dimension(425, 20));
    DonorAddLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    DonorAddPane.add(DonorAddLateralSeparator);
    DonorAddLateralSeparator.setBounds(120, 0, 20, 425);

    DonorAddHellPanel.setMinimumSize(new java.awt.Dimension(120, 245));
    DonorAddHellPanel.setPreferredSize(new java.awt.Dimension(120, 425));
    DonorAddHellPanel.setLayout(null);

    DonorAddConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorAddConfirmBut.setText("Confirmar");
    DonorAddConfirmBut.setMaximumSize(new java.awt.Dimension(110, 24));
    DonorAddConfirmBut.setMinimumSize(new java.awt.Dimension(110, 24));
    DonorAddConfirmBut.setPreferredSize(new java.awt.Dimension(110, 30));
    DonorAddHellPanel.add(DonorAddConfirmBut);
    DonorAddConfirmBut.setBounds(0, 320, 120, 30);

    DonorAddCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorAddCancelBut.setText("Cancelar");
    DonorAddCancelBut.setMaximumSize(new java.awt.Dimension(110, 30));
    DonorAddCancelBut.setMinimumSize(new java.awt.Dimension(110, 30));
    DonorAddCancelBut.setPreferredSize(new java.awt.Dimension(110, 30));
    DonorAddHellPanel.add(DonorAddCancelBut);
    DonorAddCancelBut.setBounds(0, 370, 120, 30);

    DonorAddPane.add(DonorAddHellPanel);
    DonorAddHellPanel.setBounds(0, 0, 120, 425);

    DonorAddHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 120));
    DonorAddHeavenPanel.setPreferredSize(new java.awt.Dimension(480, 425));
    DonorAddHeavenPanel.setVerifyInputWhenFocusTarget(false);
    DonorAddHeavenPanel.setLayout(null);

    DonorAddIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorAddIDLabel.setText("Identificador del donante:");
    DonorAddHeavenPanel.add(DonorAddIDLabel);
    DonorAddIDLabel.setBounds(80, 60, 170, 30);

    DonorAddIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorAddHeavenPanel.add(DonorAddIDInput);
    DonorAddIDInput.setBounds(270, 60, 130, 30);

    DonorAddNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorAddNameLabel.setText("Nombre del donante:");
    DonorAddHeavenPanel.add(DonorAddNameLabel);
    DonorAddNameLabel.setBounds(80, 140, 170, 30);

    DonorAddNameInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorAddHeavenPanel.add(DonorAddNameInput);
    DonorAddNameInput.setBounds(270, 140, 130, 30);

    DonorAddRateLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorAddRateLabel.setText("Tasa de Ventas:");
    DonorAddHeavenPanel.add(DonorAddRateLabel);
    DonorAddRateLabel.setBounds(80, 220, 170, 30);

    DonorAddRateInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorAddHeavenPanel.add(DonorAddRateInput);
    DonorAddRateInput.setBounds(270, 220, 130, 30);

    DonorAddPane.add(DonorAddHeavenPanel);
    DonorAddHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(DonorAddPane);
    DonorAddPane.setBounds(0, 0, 600, 425);

    DonorModifyPane.setMinimumSize(new java.awt.Dimension(600, 425));
    DonorModifyPane.setLayout(null);

    DonorModifyLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    DonorModifyLateralSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    DonorModifyLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    DonorModifyPane.add(DonorModifyLateralSeparator);
    DonorModifyLateralSeparator.setBounds(120, 0, 20, 425);

    DonorModifyHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    DonorModifyHellPanel.setLayout(null);

    DonorModifyConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorModifyConfirmBut.setText("Confirmar");
    DonorModifyConfirmBut.setMaximumSize(new java.awt.Dimension(110, 24));
    DonorModifyConfirmBut.setMinimumSize(new java.awt.Dimension(120, 24));
    DonorModifyConfirmBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonorModifyHellPanel.add(DonorModifyConfirmBut);
    DonorModifyConfirmBut.setBounds(0, 320, 120, 30);

    DonorModifyCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorModifyCancelBut.setText("Cancelar");
    DonorModifyCancelBut.setMaximumSize(new java.awt.Dimension(110, 30));
    DonorModifyCancelBut.setMinimumSize(new java.awt.Dimension(110, 30));
    DonorModifyCancelBut.setPreferredSize(new java.awt.Dimension(110, 30));
    DonorModifyHellPanel.add(DonorModifyCancelBut);
    DonorModifyCancelBut.setBounds(0, 370, 120, 30);

    DonorModifyPane.add(DonorModifyHellPanel);
    DonorModifyHellPanel.setBounds(0, 0, 120, 425);

    DonorModifyHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    DonorModifyHeavenPanel.setLayout(null);

    DonorModifyIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorModifyIDLabel.setText("ID del donante:");
    DonorModifyHeavenPanel.add(DonorModifyIDLabel);
    DonorModifyIDLabel.setBounds(80, 60, 160, 30);

    DonorModifyIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorModifyHeavenPanel.add(DonorModifyIDInput);
    DonorModifyIDInput.setBounds(270, 60, 130, 30);

    DonorModifyNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorModifyNameLabel.setText("Nuevo nombre:");
    DonorModifyHeavenPanel.add(DonorModifyNameLabel);
    DonorModifyNameLabel.setBounds(80, 140, 160, 30);

    DonorModifyNameInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorModifyHeavenPanel.add(DonorModifyNameInput);
    DonorModifyNameInput.setBounds(270, 140, 130, 30);

    DonorModifyRateLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorModifyRateLabel.setText("Nueva tasa de ventas:");
    DonorModifyHeavenPanel.add(DonorModifyRateLabel);
    DonorModifyRateLabel.setBounds(80, 220, 160, 30);

    DonorModifyRateInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorModifyHeavenPanel.add(DonorModifyRateInput);
    DonorModifyRateInput.setBounds(270, 220, 130, 30);

    DonorModifyPane.add(DonorModifyHeavenPanel);
    DonorModifyHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(DonorModifyPane);
    DonorModifyPane.setBounds(0, 0, 600, 425);

    DonorRemovePane.setMinimumSize(new java.awt.Dimension(600, 425));
    DonorRemovePane.setLayout(null);

    DonorRemoveLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    DonorRemoveLateralSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    DonorRemoveLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    DonorRemovePane.add(DonorRemoveLateralSeparator);
    DonorRemoveLateralSeparator.setBounds(120, 0, 20, 425);

    DonorRemoveHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    DonorRemoveHellPanel.setLayout(null);

    DonorRemoveConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveConfirmBut.setText("Confirmar");
    DonorRemoveConfirmBut.setMaximumSize(new java.awt.Dimension(120, 24));
    DonorRemoveConfirmBut.setMinimumSize(new java.awt.Dimension(120, 24));
    DonorRemoveConfirmBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonorRemoveHellPanel.add(DonorRemoveConfirmBut);
    DonorRemoveConfirmBut.setBounds(0, 320, 120, 30);

    DonorRemoveCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveCancelBut.setText("Cancelar");
    DonorRemoveCancelBut.setMaximumSize(new java.awt.Dimension(120, 30));
    DonorRemoveCancelBut.setMinimumSize(new java.awt.Dimension(120, 30));
    DonorRemoveCancelBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonorRemoveHellPanel.add(DonorRemoveCancelBut);
    DonorRemoveCancelBut.setBounds(0, 370, 120, 30);

    DonorRemovePane.add(DonorRemoveHellPanel);
    DonorRemoveHellPanel.setBounds(0, 0, 120, 425);

    DonorRemoveHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    DonorRemoveHeavenPanel.setPreferredSize(new java.awt.Dimension(480, 425));
    DonorRemoveHeavenPanel.setLayout(null);

    DonorRemoveIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveIDLabel.setText("Identificador del donante:");
    DonorRemoveHeavenPanel.add(DonorRemoveIDLabel);
    DonorRemoveIDLabel.setBounds(80, 60, 170, 30);

    DonorRemoveIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveHeavenPanel.add(DonorRemoveIDInput);
    DonorRemoveIDInput.setBounds(270, 60, 130, 30);

    DonorRemoveNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveNameLabel.setText("Nombre del donante:");
    DonorRemoveHeavenPanel.add(DonorRemoveNameLabel);
    DonorRemoveNameLabel.setBounds(80, 140, 170, 30);

    DonorRemoveNameInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveHeavenPanel.add(DonorRemoveNameInput);
    DonorRemoveNameInput.setBounds(270, 140, 130, 30);

    DonorRemoveRateLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveRateLabel.setText("Tasa de Ventas:");
    DonorRemoveHeavenPanel.add(DonorRemoveRateLabel);
    DonorRemoveRateLabel.setBounds(80, 220, 170, 30);

    DonorRemoveRateInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveHeavenPanel.add(DonorRemoveRateInput);
    DonorRemoveRateInput.setBounds(270, 220, 130, 30);

    DonorRemoveQuestionLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveQuestionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    DonorRemoveQuestionLabel.setText("¿Desea calcular la venta del");
    DonorRemoveHeavenPanel.add(DonorRemoveQuestionLabel);
    DonorRemoveQuestionLabel.setBounds(130, 290, 220, 30);

    DonorRemoveQuestion2Label.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveQuestion2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    DonorRemoveQuestion2Label.setText("stock de este donante?");
    DonorRemoveHeavenPanel.add(DonorRemoveQuestion2Label);
    DonorRemoveQuestion2Label.setBounds(130, 310, 220, 30);

    DonorRemoveRadioYesBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveRadioYesBut.setMnemonic('s');
    DonorRemoveRadioYesBut.setText("Si");
    DonorRemoveHeavenPanel.add(DonorRemoveRadioYesBut);
    DonorRemoveRadioYesBut.setBounds(150, 350, 50, 28);

    DonorRemoveRadioNoBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonorRemoveRadioNoBut.setMnemonic('n');
    DonorRemoveRadioNoBut.setText("No");
    DonorRemoveHeavenPanel.add(DonorRemoveRadioNoBut);
    DonorRemoveRadioNoBut.setBounds(280, 350, 50, 28);

    DonorRemovePane.add(DonorRemoveHeavenPanel);
    DonorRemoveHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(DonorRemovePane);
    DonorRemovePane.setBounds(0, 0, 600, 425);

    DonaTablePane.setPreferredSize(new java.awt.Dimension(600, 460));
    DonaTablePane.setLayout(null);

    DonaTableLateralPanel.setLayout(null);

    DonaTableAddBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaTableAddBut.setText("Añadir");
    DonaTableLateralPanel.add(DonaTableAddBut);
    DonaTableAddBut.setBounds(0, 10, 120, 30);

    DonaTableModifyBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaTableModifyBut.setText("Modificar");
    DonaTableLateralPanel.add(DonaTableModifyBut);
    DonaTableModifyBut.setBounds(0, 60, 120, 30);

    DonaTableRemoveBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaTableRemoveBut.setText("Eliminar");
    DonaTableLateralPanel.add(DonaTableRemoveBut);
    DonaTableRemoveBut.setBounds(0, 110, 120, 30);

    DonaTableDonorSearchText.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaTableDonorSearchText.setText("Donante");
    DonaTableLateralPanel.add(DonaTableDonorSearchText);
    DonaTableDonorSearchText.setBounds(0, 190, 120, 30);

    DonaTableMaterialSearchText.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaTableMaterialSearchText.setText("Material");
    DonaTableLateralPanel.add(DonaTableMaterialSearchText);
    DonaTableMaterialSearchText.setBounds(0, 240, 120, 30);

    DonaTableDateSearchText.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaTableDateSearchText.setText("Fecha");
    DonaTableLateralPanel.add(DonaTableDateSearchText);
    DonaTableDateSearchText.setBounds(0, 290, 120, 30);

    DonaTableBackBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaTableBackBut.setText("Volver");
    DonaTableLateralPanel.add(DonaTableBackBut);
    DonaTableBackBut.setBounds(0, 370, 120, 30);

    DonaTablePane.add(DonaTableLateralPanel);
    DonaTableLateralPanel.setBounds(0, 0, 120, 460);

    DonaTableSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    DonaTablePane.add(DonaTableSeparator);
    DonaTableSeparator.setBounds(120, 0, 20, 460);

    DonaTableScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(214, 217, 223), 3));
    DonaTableScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    DonaTableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    DonaTableScrollPane.setMinimumSize(new java.awt.Dimension(450, 415));
    DonaTableScrollPane.setPreferredSize(new java.awt.Dimension(450, 415));

    DonaTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null}
        },
        new String [] {
            "Donante (ID)", "Material (ID)", "Cantidad", "Precio Mínimo", "Fecha y Hora"
        }
    )
    {
        boolean[] canEdit = new boolean [] {
            false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    DonaTable.setMinimumSize(new java.awt.Dimension(450, 415));
    DonaTable.setName("ResTable"); // NOI18N
    DonaTable.setPreferredSize(new java.awt.Dimension(450, 415));
    DonaTable.setRowHeight(24);
    DonaTable.setShowGrid(true);
    DonaTableScrollPane.setViewportView(DonaTable);

    DonaTablePane.add(DonaTableScrollPane);
    DonaTableScrollPane.setBounds(130, 0, 450, 415);

    MainWLayerPane.add(DonaTablePane);
    DonaTablePane.setBounds(0, 0, 600, 460);

    DonaAddPane.setMinimumSize(new java.awt.Dimension(600, 425));
    DonaAddPane.setLayout(null);

    DonaAddLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    DonaAddLateralSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    DonaAddLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    DonaAddPane.add(DonaAddLateralSeparator);
    DonaAddLateralSeparator.setBounds(120, 0, 20, 425);

    DonaAddHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    DonaAddHellPanel.setLayout(null);

    DonaAddConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddConfirmBut.setText("Confirmar");
    DonaAddConfirmBut.setMaximumSize(new java.awt.Dimension(120, 24));
    DonaAddConfirmBut.setMinimumSize(new java.awt.Dimension(120, 24));
    DonaAddConfirmBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonaAddHellPanel.add(DonaAddConfirmBut);
    DonaAddConfirmBut.setBounds(0, 320, 120, 30);

    DonaAddCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddCancelBut.setText("Cancelar");
    DonaAddCancelBut.setMaximumSize(new java.awt.Dimension(120, 30));
    DonaAddCancelBut.setMinimumSize(new java.awt.Dimension(120, 30));
    DonaAddCancelBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonaAddHellPanel.add(DonaAddCancelBut);
    DonaAddCancelBut.setBounds(0, 370, 120, 30);

    DonaAddPane.add(DonaAddHellPanel);
    DonaAddHellPanel.setBounds(0, 0, 120, 425);

    DonaAddHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    DonaAddHeavenPanel.setLayout(null);

    DonaAddDonorLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddDonorLabel.setText("Donante:");
    DonaAddHeavenPanel.add(DonaAddDonorLabel);
    DonaAddDonorLabel.setBounds(80, 60, 140, 30);

    DonaAddDonorInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddHeavenPanel.add(DonaAddDonorInput);
    DonaAddDonorInput.setBounds(270, 60, 130, 30);

    DonaAddResourceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddResourceLabel.setText("Recurso donado:");
    DonaAddHeavenPanel.add(DonaAddResourceLabel);
    DonaAddResourceLabel.setBounds(80, 140, 140, 30);

    DonaAddResourceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddHeavenPanel.add(DonaAddResourceInput);
    DonaAddResourceInput.setBounds(270, 140, 130, 30);

    DonaAddCuantityLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddCuantityLabel.setText("Cantidad:");
    DonaAddHeavenPanel.add(DonaAddCuantityLabel);
    DonaAddCuantityLabel.setBounds(80, 220, 140, 30);

    DonaAddCuantityInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddHeavenPanel.add(DonaAddCuantityInput);
    DonaAddCuantityInput.setBounds(270, 220, 130, 30);

    DonaAddPriceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddPriceLabel.setText("Precio mínimo:");
    DonaAddHeavenPanel.add(DonaAddPriceLabel);
    DonaAddPriceLabel.setBounds(80, 300, 140, 30);

    DonaAddPriceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaAddHeavenPanel.add(DonaAddPriceInput);
    DonaAddPriceInput.setBounds(270, 300, 130, 30);

    DonaAddPane.add(DonaAddHeavenPanel);
    DonaAddHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(DonaAddPane);
    DonaAddPane.setBounds(0, 0, 600, 425);

    DonaModifyPane.setMinimumSize(new java.awt.Dimension(600, 425));
    DonaModifyPane.setLayout(null);

    DonaModifyLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    DonaModifyLateralSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    DonaModifyLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    DonaModifyPane.add(DonaModifyLateralSeparator);
    DonaModifyLateralSeparator.setBounds(120, 0, 20, 425);

    DonaModifyHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    DonaModifyHellPanel.setLayout(null);

    DonaModifyConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyConfirmBut.setText("Confirmar");
    DonaModifyConfirmBut.setMaximumSize(new java.awt.Dimension(120, 24));
    DonaModifyConfirmBut.setMinimumSize(new java.awt.Dimension(120, 24));
    DonaModifyConfirmBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonaModifyHellPanel.add(DonaModifyConfirmBut);
    DonaModifyConfirmBut.setBounds(0, 320, 120, 30);

    DonaModifyCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyCancelBut.setText("Cancelar");
    DonaModifyCancelBut.setMaximumSize(new java.awt.Dimension(120, 30));
    DonaModifyCancelBut.setMinimumSize(new java.awt.Dimension(120, 30));
    DonaModifyCancelBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonaModifyHellPanel.add(DonaModifyCancelBut);
    DonaModifyCancelBut.setBounds(0, 370, 120, 30);

    DonaModifyPane.add(DonaModifyHellPanel);
    DonaModifyHellPanel.setBounds(0, 0, 120, 425);

    DonaModifyHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    DonaModifyHeavenPanel.setLayout(null);

    DonaModifyDonorLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyDonorLabel.setText("Nuevo donante:");
    DonaModifyHeavenPanel.add(DonaModifyDonorLabel);
    DonaModifyDonorLabel.setBounds(80, 60, 140, 30);

    DonaModifyDonorInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyHeavenPanel.add(DonaModifyDonorInput);
    DonaModifyDonorInput.setBounds(270, 60, 130, 30);

    DonaModifyResourceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyResourceLabel.setText("Nuevo recurso:");
    DonaModifyHeavenPanel.add(DonaModifyResourceLabel);
    DonaModifyResourceLabel.setBounds(80, 140, 140, 30);

    DonaModifyResourceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyHeavenPanel.add(DonaModifyResourceInput);
    DonaModifyResourceInput.setBounds(270, 140, 130, 30);

    DonaModifyCuantityLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyCuantityLabel.setText("Nueva cantidad:");
    DonaModifyHeavenPanel.add(DonaModifyCuantityLabel);
    DonaModifyCuantityLabel.setBounds(80, 220, 140, 30);

    DonaModifyCuantityInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyHeavenPanel.add(DonaModifyCuantityInput);
    DonaModifyCuantityInput.setBounds(270, 220, 130, 30);

    DonaModifyPriceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyPriceLabel.setText("Nuevo precio mínimo:");
    DonaModifyHeavenPanel.add(DonaModifyPriceLabel);
    DonaModifyPriceLabel.setBounds(80, 300, 140, 30);

    DonaModifyPriceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaModifyHeavenPanel.add(DonaModifyPriceInput);
    DonaModifyPriceInput.setBounds(270, 300, 130, 30);

    DonaModifyPane.add(DonaModifyHeavenPanel);
    DonaModifyHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(DonaModifyPane);
    DonaModifyPane.setBounds(0, 0, 600, 425);

    DonaRemovePane.setMinimumSize(new java.awt.Dimension(600, 425));
    DonaRemovePane.setLayout(null);

    DonaRemoveLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    DonaRemoveLateralSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    DonaRemoveLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    DonaRemovePane.add(DonaRemoveLateralSeparator);
    DonaRemoveLateralSeparator.setBounds(120, 0, 20, 425);

    DonaRemoveHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    DonaRemoveHellPanel.setLayout(null);

    DonaRemoveConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveConfirmBut.setText("Confirmar");
    DonaRemoveConfirmBut.setMaximumSize(new java.awt.Dimension(120, 24));
    DonaRemoveConfirmBut.setMinimumSize(new java.awt.Dimension(120, 24));
    DonaRemoveConfirmBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonaRemoveHellPanel.add(DonaRemoveConfirmBut);
    DonaRemoveConfirmBut.setBounds(0, 320, 120, 30);

    DonaRemoveCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveCancelBut.setText("Cancelar");
    DonaRemoveCancelBut.setMaximumSize(new java.awt.Dimension(120, 30));
    DonaRemoveCancelBut.setMinimumSize(new java.awt.Dimension(120, 30));
    DonaRemoveCancelBut.setPreferredSize(new java.awt.Dimension(120, 30));
    DonaRemoveHellPanel.add(DonaRemoveCancelBut);
    DonaRemoveCancelBut.setBounds(0, 370, 120, 30);

    DonaRemovePane.add(DonaRemoveHellPanel);
    DonaRemoveHellPanel.setBounds(0, 0, 120, 425);

    DonaRemoveHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    DonaRemoveHeavenPanel.setLayout(null);

    DonaRemoveDonorLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveDonorLabel.setText("Donante:");
    DonaRemoveHeavenPanel.add(DonaRemoveDonorLabel);
    DonaRemoveDonorLabel.setBounds(80, 60, 140, 30);

    DonaRemoveDonorInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveHeavenPanel.add(DonaRemoveDonorInput);
    DonaRemoveDonorInput.setBounds(270, 60, 130, 30);

    DonaRemoveResourceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveResourceLabel.setText("Recurso:");
    DonaRemoveHeavenPanel.add(DonaRemoveResourceLabel);
    DonaRemoveResourceLabel.setBounds(80, 140, 140, 30);

    DonaRemoveResourceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveHeavenPanel.add(DonaRemoveResourceInput);
    DonaRemoveResourceInput.setBounds(270, 140, 130, 30);

    DonaRemoveCuantityLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveCuantityLabel.setText("Cantidad:");
    DonaRemoveHeavenPanel.add(DonaRemoveCuantityLabel);
    DonaRemoveCuantityLabel.setBounds(80, 220, 140, 30);

    DonaRemoveCuantityInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveHeavenPanel.add(DonaRemoveCuantityInput);
    DonaRemoveCuantityInput.setBounds(270, 220, 130, 30);

    DonaRemovePriceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemovePriceLabel.setText("Nuevo precio mínimo:");
    DonaRemoveHeavenPanel.add(DonaRemovePriceLabel);
    DonaRemovePriceLabel.setBounds(80, 300, 140, 30);

    DonaRemovePriceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    DonaRemoveHeavenPanel.add(DonaRemovePriceInput);
    DonaRemovePriceInput.setBounds(270, 300, 130, 30);

    DonaRemovePane.add(DonaRemoveHeavenPanel);
    DonaRemoveHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(DonaRemovePane);
    DonaRemovePane.setBounds(0, 0, 600, 425);

    SaleTablePane.setMinimumSize(new java.awt.Dimension(600, 425));
    SaleTablePane.setPreferredSize(new java.awt.Dimension(600, 425));
    SaleTablePane.setLayout(null);

    SaleTableLateralPanel.setLayout(null);

    SaleTableAddBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleTableAddBut.setText("Añadir");
    SaleTableLateralPanel.add(SaleTableAddBut);
    SaleTableAddBut.setBounds(0, 10, 120, 30);

    SaleTableModifyBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleTableModifyBut.setText("Modificar");
    SaleTableLateralPanel.add(SaleTableModifyBut);
    SaleTableModifyBut.setBounds(0, 60, 120, 30);

    SaleTableRemoveBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleTableRemoveBut.setText("Eliminar");
    SaleTableLateralPanel.add(SaleTableRemoveBut);
    SaleTableRemoveBut.setBounds(0, 110, 120, 30);

    SaleTableResourceSearchInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleTableResourceSearchInput.setText("Material");
    SaleTableLateralPanel.add(SaleTableResourceSearchInput);
    SaleTableResourceSearchInput.setBounds(0, 190, 120, 30);

    SaleTableFechaSearchInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleTableFechaSearchInput.setText("Fecha");
    SaleTableLateralPanel.add(SaleTableFechaSearchInput);
    SaleTableFechaSearchInput.setBounds(0, 240, 120, 30);

    SaleTableBackBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleTableBackBut.setText("Volver");
    SaleTableLateralPanel.add(SaleTableBackBut);
    SaleTableBackBut.setBounds(0, 370, 120, 30);

    SaleTablePane.add(SaleTableLateralPanel);
    SaleTableLateralPanel.setBounds(0, 0, 120, 460);

    SaleTableSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    SaleTablePane.add(SaleTableSeparator);
    SaleTableSeparator.setBounds(120, 0, 20, 460);

    SaleTableScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(214, 217, 223), 3));
    SaleTableScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    SaleTableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    SaleTableScrollPane.setMinimumSize(new java.awt.Dimension(450, 415));
    SaleTableScrollPane.setPreferredSize(new java.awt.Dimension(450, 415));

    SaleTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null}
        },
        new String [] {
            "ID Venta", "Material (ID)", "Cantidad", "Precio", "Fecha y Hora"
        }
    )
    {
        boolean[] canEdit = new boolean [] {
            false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    SaleTable.setAutoscrolls(false);
    SaleTable.setMinimumSize(new java.awt.Dimension(450, 415));
    SaleTable.setPreferredSize(new java.awt.Dimension(450, 415));
    SaleTable.setRowHeight(24);
    SaleTable.setShowGrid(true);
    SaleTableScrollPane.setViewportView(SaleTable);

    SaleTablePane.add(SaleTableScrollPane);
    SaleTableScrollPane.setBounds(130, 0, 450, 415);

    MainWLayerPane.add(SaleTablePane);
    SaleTablePane.setBounds(0, 0, 600, 425);

    SaleAddPane.setMinimumSize(new java.awt.Dimension(600, 425));
    SaleAddPane.setLayout(null);

    SaleAddLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    SaleAddLateralSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    SaleAddLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    SaleAddPane.add(SaleAddLateralSeparator);
    SaleAddLateralSeparator.setBounds(120, 0, 20, 425);

    SaleAddHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    SaleAddHellPanel.setLayout(null);

    SaleAddConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddConfirmBut.setText("Confirmar");
    SaleAddConfirmBut.setMaximumSize(new java.awt.Dimension(120, 24));
    SaleAddConfirmBut.setMinimumSize(new java.awt.Dimension(120, 24));
    SaleAddConfirmBut.setPreferredSize(new java.awt.Dimension(120, 30));
    SaleAddHellPanel.add(SaleAddConfirmBut);
    SaleAddConfirmBut.setBounds(0, 320, 120, 30);

    SaleAddCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddCancelBut.setText("Cancelar");
    SaleAddCancelBut.setMaximumSize(new java.awt.Dimension(120, 30));
    SaleAddCancelBut.setMinimumSize(new java.awt.Dimension(120, 30));
    SaleAddCancelBut.setPreferredSize(new java.awt.Dimension(120, 30));
    SaleAddHellPanel.add(SaleAddCancelBut);
    SaleAddCancelBut.setBounds(0, 370, 120, 30);

    SaleAddPane.add(SaleAddHellPanel);
    SaleAddHellPanel.setBounds(0, 0, 120, 425);

    SaleAddHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    SaleAddHeavenPanel.setLayout(null);

    SaleAddIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddIDLabel.setText("ID de Venta:");
    SaleAddHeavenPanel.add(SaleAddIDLabel);
    SaleAddIDLabel.setBounds(80, 60, 140, 30);

    SaleAddIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddHeavenPanel.add(SaleAddIDInput);
    SaleAddIDInput.setBounds(270, 60, 130, 30);

    SaleAddResourceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddResourceLabel.setText("Recurso:");
    SaleAddHeavenPanel.add(SaleAddResourceLabel);
    SaleAddResourceLabel.setBounds(80, 140, 140, 30);

    SaleAddResourceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddHeavenPanel.add(SaleAddResourceInput);
    SaleAddResourceInput.setBounds(270, 140, 130, 30);

    SaleAddCuantityLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddCuantityLabel.setText("Cantidad:");
    SaleAddHeavenPanel.add(SaleAddCuantityLabel);
    SaleAddCuantityLabel.setBounds(80, 220, 140, 30);

    SaleAddCuantityInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddHeavenPanel.add(SaleAddCuantityInput);
    SaleAddCuantityInput.setBounds(270, 220, 130, 30);

    SaleAddPriceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddPriceLabel.setText("Precio:");
    SaleAddHeavenPanel.add(SaleAddPriceLabel);
    SaleAddPriceLabel.setBounds(80, 300, 140, 30);

    SaleAddPriceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleAddHeavenPanel.add(SaleAddPriceInput);
    SaleAddPriceInput.setBounds(270, 300, 130, 30);

    SaleAddPane.add(SaleAddHeavenPanel);
    SaleAddHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(SaleAddPane);
    SaleAddPane.setBounds(0, 0, 600, 425);

    SaleModifyPane.setMinimumSize(new java.awt.Dimension(600, 425));
    SaleModifyPane.setLayout(null);

    SaleModifyLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    SaleModifyLateralSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    SaleModifyLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    SaleModifyPane.add(SaleModifyLateralSeparator);
    SaleModifyLateralSeparator.setBounds(120, 0, 20, 425);

    SaleModifyHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    SaleModifyHellPanel.setLayout(null);

    SaleModifyConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyConfirmBut.setText("Confirmar");
    SaleModifyConfirmBut.setMaximumSize(new java.awt.Dimension(120, 24));
    SaleModifyConfirmBut.setMinimumSize(new java.awt.Dimension(120, 24));
    SaleModifyConfirmBut.setPreferredSize(new java.awt.Dimension(120, 30));
    SaleModifyHellPanel.add(SaleModifyConfirmBut);
    SaleModifyConfirmBut.setBounds(0, 320, 120, 30);

    SaleModifyCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyCancelBut.setText("Cancelar");
    SaleModifyCancelBut.setMaximumSize(new java.awt.Dimension(120, 30));
    SaleModifyCancelBut.setMinimumSize(new java.awt.Dimension(120, 30));
    SaleModifyCancelBut.setPreferredSize(new java.awt.Dimension(120, 30));
    SaleModifyHellPanel.add(SaleModifyCancelBut);
    SaleModifyCancelBut.setBounds(0, 370, 120, 30);

    SaleModifyPane.add(SaleModifyHellPanel);
    SaleModifyHellPanel.setBounds(0, 0, 120, 425);

    SaleModifyHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    SaleModifyHeavenPanel.setLayout(null);

    SaleModifyIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyIDLabel.setText("ID de Venta:");
    SaleModifyHeavenPanel.add(SaleModifyIDLabel);
    SaleModifyIDLabel.setBounds(80, 60, 140, 30);

    SaleModifyIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyHeavenPanel.add(SaleModifyIDInput);
    SaleModifyIDInput.setBounds(270, 60, 130, 30);

    SaleModifyResourceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyResourceLabel.setText("Nuevo recurso:");
    SaleModifyHeavenPanel.add(SaleModifyResourceLabel);
    SaleModifyResourceLabel.setBounds(80, 140, 140, 30);

    SaleModifyResourceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyHeavenPanel.add(SaleModifyResourceInput);
    SaleModifyResourceInput.setBounds(270, 140, 130, 30);

    SaleModifyCuantityLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyCuantityLabel.setText("Nueva cantidad:");
    SaleModifyHeavenPanel.add(SaleModifyCuantityLabel);
    SaleModifyCuantityLabel.setBounds(80, 220, 140, 30);

    SaleModifyCuantityInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyHeavenPanel.add(SaleModifyCuantityInput);
    SaleModifyCuantityInput.setBounds(270, 220, 130, 30);

    SaleModifyPriceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyPriceLabel.setText("Nuevo Precio:");
    SaleModifyHeavenPanel.add(SaleModifyPriceLabel);
    SaleModifyPriceLabel.setBounds(80, 300, 140, 30);

    SaleModifyPriceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleModifyHeavenPanel.add(SaleModifyPriceInput);
    SaleModifyPriceInput.setBounds(270, 300, 130, 30);

    SaleModifyPane.add(SaleModifyHeavenPanel);
    SaleModifyHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(SaleModifyPane);
    SaleModifyPane.setBounds(0, 0, 600, 425);

    SaleRemovePane.setMinimumSize(new java.awt.Dimension(600, 425));
    SaleRemovePane.setLayout(null);

    SaleRemoveLateralSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    SaleRemoveLateralSeparator.setMinimumSize(new java.awt.Dimension(20, 425));
    SaleRemoveLateralSeparator.setPreferredSize(new java.awt.Dimension(20, 425));
    SaleRemovePane.add(SaleRemoveLateralSeparator);
    SaleRemoveLateralSeparator.setBounds(120, 0, 20, 425);

    SaleRemoveHellPanel.setMinimumSize(new java.awt.Dimension(120, 425));
    SaleRemoveHellPanel.setLayout(null);

    SaleRemoveConfirmBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveConfirmBut.setText("Confirmar");
    SaleRemoveConfirmBut.setMaximumSize(new java.awt.Dimension(120, 24));
    SaleRemoveConfirmBut.setMinimumSize(new java.awt.Dimension(120, 24));
    SaleRemoveConfirmBut.setPreferredSize(new java.awt.Dimension(120, 30));
    SaleRemoveHellPanel.add(SaleRemoveConfirmBut);
    SaleRemoveConfirmBut.setBounds(0, 320, 120, 30);

    SaleRemoveCancelBut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveCancelBut.setText("Cancelar");
    SaleRemoveCancelBut.setMaximumSize(new java.awt.Dimension(120, 30));
    SaleRemoveCancelBut.setMinimumSize(new java.awt.Dimension(120, 30));
    SaleRemoveCancelBut.setPreferredSize(new java.awt.Dimension(120, 30));
    SaleRemoveHellPanel.add(SaleRemoveCancelBut);
    SaleRemoveCancelBut.setBounds(0, 370, 120, 30);

    SaleRemovePane.add(SaleRemoveHellPanel);
    SaleRemoveHellPanel.setBounds(0, 0, 120, 425);

    SaleRemoveHeavenPanel.setMinimumSize(new java.awt.Dimension(480, 425));
    SaleRemoveHeavenPanel.setLayout(null);

    SaleRemoveIDLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveIDLabel.setText("ID de Venta:");
    SaleRemoveHeavenPanel.add(SaleRemoveIDLabel);
    SaleRemoveIDLabel.setBounds(80, 60, 140, 30);

    SaleRemoveIDInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveHeavenPanel.add(SaleRemoveIDInput);
    SaleRemoveIDInput.setBounds(270, 60, 130, 30);

    SaleRemoveResourceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveResourceLabel.setText("Recurso:");
    SaleRemoveHeavenPanel.add(SaleRemoveResourceLabel);
    SaleRemoveResourceLabel.setBounds(80, 140, 140, 30);

    SaleRemoveResourceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveHeavenPanel.add(SaleRemoveResourceInput);
    SaleRemoveResourceInput.setBounds(270, 140, 130, 30);

    SaleRemoveCuantityLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveCuantityLabel.setText("Cantidad:");
    SaleRemoveHeavenPanel.add(SaleRemoveCuantityLabel);
    SaleRemoveCuantityLabel.setBounds(80, 220, 140, 30);

    SaleRemoveCuantityInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveHeavenPanel.add(SaleRemoveCuantityInput);
    SaleRemoveCuantityInput.setBounds(270, 220, 130, 30);

    SaleRemovePriceLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemovePriceLabel.setText("Precio:");
    SaleRemoveHeavenPanel.add(SaleRemovePriceLabel);
    SaleRemovePriceLabel.setBounds(80, 300, 140, 30);

    SaleRemovePriceInput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    SaleRemoveHeavenPanel.add(SaleRemovePriceInput);
    SaleRemovePriceInput.setBounds(270, 300, 130, 30);

    SaleRemovePane.add(SaleRemoveHeavenPanel);
    SaleRemoveHeavenPanel.setBounds(120, 0, 480, 425);

    MainWLayerPane.add(SaleRemovePane);
    SaleRemovePane.setBounds(0, 0, 600, 425);

    getContentPane().add(MainWLayerPane);
    MainWLayerPane.setBounds(0, 0, 600, 425);

    MainWMenuBar.setMaximumSize(new java.awt.Dimension(264, 25));
    MainWMenuBar.setMinimumSize(new java.awt.Dimension(264, 25));
    MainWMenuBar.setPreferredSize(new java.awt.Dimension(264, 25));

    ResTableMenu.setText("Recursos");
    MainWMenuBar.add(ResTableMenu);

    DonorTableMenu.setText("Donantes");
    MainWMenuBar.add(DonorTableMenu);

    DonaTableMenu.setText("Donaciones");
    MainWMenuBar.add(DonaTableMenu);

    SaleTableMenu.setText("Ventas");
    MainWMenuBar.add(SaleTableMenu);

    setJMenuBar(MainWMenuBar);

    pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initListeners(){
        //Listener initializer for custom events:
        //--MouseClick listeners to send a table row to the correspondant modifyPanel
        ResTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClicked(evt, "Resource");
            }
        });
        
        DonorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClicked(evt, "Donor");
            }
        });
        
        DonaTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClicked(evt, "Donation");
            }
        });
        
        SaleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClicked(evt, "Sale");
            }
        });
        
        
        //--MouseClick listeners for the MenuBar items to transition to one Panel to another 
        //  without the event as a parameter (the parameter was deemed unnecesary to allow 
        //  them to be used by non-listener functions). 
        ResTableMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowResTable();
            }
        });
        
        DonorTableMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonorTable();
            }
        });
        
        DonaTableMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonaTable();
            }
        });
        
        SaleTableMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowSaleTable();
            }
        });
        
        //--MouseClick listeners for the Panel Buttons to transition to one Panel to another 
        //  without the event as a parameter. 
        ResTableBackBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resetVisibility();
            }
        });
        
        ResTableAddBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                launchRowAdder("Resource");
            }
        });
        
        ResTableModifyBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowResModify();
            }
        });
        
        ResTableRemoveBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) ResTable.getModel();
                int selRow = ResTable.getSelectedRow();
                int id = (Integer) ResTable.getValueAt(selRow, 0);
                
                launchRowRemover("Resource", id, 0);
            }
        });
        
        DonorTableBackBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resetVisibility();
            }
        });
        
        DonorTableAddBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                launchRowAdder("Donor");
            }
        });
        
        DonorTableModifyBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonorModify();
            }
        });
        
        DonorTableRemoveBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) DonorTable.getModel();
                int selRow = DonorTable.getSelectedRow();
                int id = (Integer) DonorTable.getValueAt(selRow, 0);
                
                launchRowRemover("Donor", id, 0);
            }
        });
        
        DonaTableBackBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resetVisibility();
            }
        });
        
        DonaTableAddBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                launchRowAdder("Donation");
            }
        });
        
        DonaTableModifyBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonaModify();
            }
        });
        
        DonaTableRemoveBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) DonaTable.getModel();
                int selRow = DonaTable.getSelectedRow();
                
                String resID = (String) DonaTable.getValueAt(selRow, 1);
                int id1 = Integer.parseInt(resID.split("\\(")[1].split("\\)")[0]);
                
                String donorID = (String) DonaTable.getValueAt(selRow, 0);
                int id2 = Integer.parseInt(donorID.split("\\(")[1].split("\\)")[0]);
                
                launchRowRemover("Donation", id1, id2);
            }
        });
        
        SaleTableBackBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resetVisibility();
            }
        });
        
        SaleTableAddBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                launchRowAdder("Sale");
            }
        });
        
        SaleTableModifyBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowSaleModify();
            }
        });
        
        SaleTableRemoveBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) SaleTable.getModel();
                int selRow = SaleTable.getSelectedRow();
                int id = (Integer) SaleTable.getValueAt(selRow, 0);
                
                launchRowRemover("Sale", id, 0);
            }
        });
        
        //---------------------------Visual Separator---------------------------
        
        ResAddCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowResTable();
                
                ResAddIDInput.setText("");
                ResAddNameInput.setText("");
                ResAddStockInput.setText("");
            }
        });
        
        ResModifyCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowResTable();
            }
        });
        
        ResRemoveCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowResTable();
            }
        });
        
        DonaAddCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonaTable();
                
                DonaAddDonorInput.setText("");
                DonaAddResourceInput.setText("");
                DonaAddCuantityInput.setText("");
                DonaAddPriceInput.setText("");
            }
        });
        
        DonaModifyCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonaTable();
            }
        });
        
        DonaRemoveCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonaTable();
            }
        });
        
        DonorAddCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonorTable();
                
                DonorAddIDInput.setText("");
                DonorAddNameInput.setText("");
                DonorAddRateInput.setText("");
            }
        });
        
        DonorModifyCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonorTable();
            }
        });
        
        DonorRemoveCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowDonorTable();
            }
        });
        
        SaleAddCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowSaleTable();
                
                SaleAddIDInput.setText("");
                SaleAddResourceInput.setText("");
                SaleAddCuantityInput.setText("");
                SaleAddPriceInput.setText("");
            }
        });
        
        SaleModifyCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowSaleTable();
            }
        });
        
        SaleRemoveCancelBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ShowSaleTable();
            }
        });
        
        //--MouseClick listeners for the "Confirmar" Buttons to show the confirmation dialog.
        ResAddConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                insert("Resource");
            }
        });
        
        DonorAddConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                insert("Donor");
            }
        });
        
        DonaAddConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                insert("Donation");
            }
        });
        
        SaleAddConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                insert("Sale");
            }
        });

        //---------------------------Visual Separator---------------------------
        
        ResModifyConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) ResTable.getModel();
                int selRow = ResTable.getSelectedRow();
                
                int id1 = (Integer) ResTable.getValueAt(selRow, 0);
                
                modify("Resource", id1, 0, "");
            }
        });
        
        DonorModifyConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) DonorTable.getModel();
                int selRow = DonorTable.getSelectedRow();
                
                int id1 = (Integer) DonorTable.getValueAt(selRow, 0);
                
                modify("Donor", id1, 0, "");
            }
        });
        
        DonaModifyConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) DonaTable.getModel();
                int selRow = DonaTable.getSelectedRow();
                
                String donorID = (String) DonaTable.getValueAt(selRow, 0);
                int id1 = Integer.parseInt(donorID.split("\\(")[1].split("\\)")[0]);

                String resID = (String) DonaTable.getValueAt(selRow, 1);
                int id2 = Integer.parseInt(resID.split("\\(")[1].split("\\)")[0]);
                
                String time = (String) DonaTable.getValueAt(selRow, 4);
                
                modify("Donation", id1, id2, time);
            }
        });
        
        SaleModifyConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) SaleTable.getModel();
                int selRow = SaleTable.getSelectedRow();
                
                int id1 = (Integer) SaleTable.getValueAt(selRow, 0);
                
                String resID = (String) SaleTable.getValueAt(selRow, 1);
                int id2 = Integer.parseInt(resID.split("\\(")[1].split("\\)")[0]);
                
                String time = (String) SaleTable.getValueAt(selRow, 4);
                
                modify("Sale", id1, id2, time);
            }
        });
        
        //---------------------------Visual Separator---------------------------
        
        ResRemoveConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) ResTable.getModel();
                int selRow = ResTable.getSelectedRow();
                
                int id1 = (Integer) ResTable.getValueAt(selRow, 0);
                
                remove("Resource", id1, 0, "");
            }
        });
        
        DonorRemoveConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) DonorTable.getModel();
                int selRow = DonorTable.getSelectedRow();
                
                int id1 = (Integer) DonorTable.getValueAt(selRow, 0);
                
                remove("Donor", id1, 0, "");
            }
        });
        
        DonaRemoveConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) DonaTable.getModel();
                int selRow = DonaTable.getSelectedRow(); 
                
                String resID = (String) DonaTable.getValueAt(selRow, 1);
                int id1 = Integer.parseInt(resID.split("\\(")[1].split("\\)")[0]);
                
                String donorID = (String) DonaTable.getValueAt(selRow, 0);
                int id2 = Integer.parseInt(donorID.split("\\(")[1].split("\\)")[0]);
                
                String time = (String) DonaTable.getValueAt(selRow, 4);
                
                remove("Donation", id1, id2, time);
            }
        });
        
        SaleRemoveConfirmBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DefaultTableModel tModel = (DefaultTableModel) SaleTable.getModel();
                int selRow = SaleTable.getSelectedRow();
                
                int id1 = (Integer) SaleTable.getValueAt(selRow, 0);
                
                remove("Sale", id1, 0, "");
            }
        });
    }
    
    private void initVisibility(){
        //Set visibility settings to not show any panel at the start of the app:
        MainMenuPane.setVisible(true);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
        
    private void ShowResTable() {                              
        //Set visibility settings to show the Resources Table:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(true);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
        
        tableMaker("Resource");
    }
    
    private void ShowResAdd() {                            
        // Set visibility settings to show the panel to add Resources:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(true);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowResModify() {                               
        // Set visibility settings to show the panel to modify Resources:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(true);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowResRemove() {                               
        // Set visibility settings to show the panel to remove Resources:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(true);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowDonorTable() {                                
        //Set visibility settings to show the Donor Table:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(true);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
                
        tableMaker("Donor");
    }
    
    private void ShowDonorAdd() {                              
        // Set visibility settings to show the panel to add Donors:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(true);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowDonorModify() {                                 
        // Set visibility settings to show the panel to modify Donors:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(true);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowDonorRemove() {                                 
        // Set visibility settings to show the panel to remove Donors:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(true);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowDonaTable() {                               
        //Set visibility settings to show the Donation Table:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(true);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
        
        tableMaker("Donation");
    }
    
    private void ShowDonaAdd() {                             
        // Set visibility settings to show the panel to add Donations:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(true);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowDonaModify() {                                
        // Set visibility settings to show the panel to modify Donations:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(true);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowDonaRemove() {                                
        // Set visibility settings to show the panel to remove Donations:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(true);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowSaleTable() {                               
        //Set visibility settings to show the Sales Table:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(true);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
        
        tableMaker("Sale");
    }
    
    private void ShowSaleAdd() {                             
        // Set visibility settings to show the panel to add Sales:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(true);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowSaleModify() {                                
        // Set visibility settings to show the panel to modify Sales:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(true);
        SaleRemovePane.setVisible(false);
    }
    
    private void ShowSaleRemove() {                                
        // Set visibility settings to show the panel to remove Sales:
        MainMenuPane.setVisible(false);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(true);
    }
    
    private void resetVisibility() {                                 
        // Reset visibility settings to not show any panel:
        MainMenuPane.setVisible(true);
        ResTablePane.setVisible(false);
        ResAddPane.setVisible(false);
        ResModifyPane.setVisible(false);
        ResRemovePane.setVisible(false);
        DonorTablePane.setVisible(false);
        DonorAddPane.setVisible(false);
        DonorModifyPane.setVisible(false);
        DonorRemovePane.setVisible(false);
        DonaTablePane.setVisible(false);
        DonaAddPane.setVisible(false);
        DonaModifyPane.setVisible(false);
        DonaRemovePane.setVisible(false);
        SaleTablePane.setVisible(false);
        SaleAddPane.setVisible(false);
        SaleModifyPane.setVisible(false);
        SaleRemovePane.setVisible(false);
    }
    
    
      
    private void tableMaker(String tableName){
        //Method to detect, list and show the data contained in each of the DB tables.
        DefaultTableModel tModel;
        switch(tableName){
            case "Resource":
                tModel = (DefaultTableModel) this.ResTable.getModel();
                break;
            case "Donor":
                tModel = (DefaultTableModel) this.DonorTable.getModel();
                break;
            case "Donation":
                tModel = (DefaultTableModel) this.DonaTable.getModel();
                break;
            case "Sale":
                tModel = (DefaultTableModel) this.SaleTable.getModel();
                break;
            default:
                tModel = (DefaultTableModel) this.SaleTable.getModel();
                this.mensaje("Información","Error de función, no se ha especificado la tabla a mostrar: ",1);
                break;
        };
        
        for(int i = tModel.getRowCount() - 1; i >= 0; i--) {
            tModel.removeRow(i);
        }
        
        try {
            String query = "SELECT * FROM " + tableName;
            ResultSet res = bridge.querier.executeQuery(query);
            
            SQLBridge auxBridge = new SQLBridge("cooperativa.db");
            auxBridge.startConnection();
            ResultSet auxRes = null;
            
            switch(tableName){
                case "Resource":
                    while(res.next()){
                        String lastTime = "SELECT MAX(sendTime) FROM Donation WHERE resID = (SELECT ID FROM Resource WHERE ID = " + res.getInt(1) + ")";
                        auxRes = auxBridge.querier.executeQuery(lastTime);
                        
                        tModel.addRow(new Object[] {res.getInt(1), res.getString(2), res.getLong(3), auxRes.getString(1) } );
                    }
                    break;
                case "Donor":
                    while(res.next()){
                        String lastTime = "SELECT MAX(sendTime) FROM Donation WHERE donorID = (SELECT ID FROM Donor WHERE ID = " + res.getInt(1) + ")";
                        auxRes = auxBridge.querier.executeQuery(lastTime);
                        
                        tModel.addRow(new Object[] {res.getInt(1), res.getString(2), res.getDouble(3) * 100 + "%", auxRes.getString(1)} );
                    }
                    break;
                case "Donation":
                    while(res.next()){
                        String getDonor = "SELECT name FROM Donor WHERE ID = (SELECT donorID FROM Donation WHERE donorID = " + res.getInt(5) + ")";
                        auxRes = auxBridge.querier.executeQuery(getDonor);
                        String donor = auxRes.getString(1);
                        
                        String getResource = "SELECT type FROM Resource WHERE ID = (SELECT resID FROM Donation WHERE resID = " + res.getInt(4) + ")";
                        auxRes = auxBridge.querier.executeQuery(getResource);
                        String resource = auxRes.getString(1);
                        
                        tModel.addRow(new Object[] {donor + " (" + res.getInt(5) + ")", resource + " (" + res.getInt(4) + ")", res.getLong(1), res.getInt(2), res.getString(3)} );
                    }
                    break;
                case "Sale":
                    while(res.next()){
                        String getResource = "SELECT type FROM Resource WHERE ID = (SELECT resID FROM Sale WHERE resID = " + res.getInt(5) + ")";
                        auxRes = auxBridge.querier.executeQuery(getResource);
                        
                        tModel.addRow(new Object[] {res.getInt(1), auxRes.getString(1) + " (" + res.getInt(5) + ")", res.getLong(2), res.getInt(3), res.getString(4)} );
                    }
                    break;
                default:
                    System.out.println("No hay una tabla definida, no se mostrará nada.");
                    this.mensaje("Información","Error de función, no se ha especificado la tabla a mostrar: ",1);
                    break;
            }
            
            auxRes.close();
            auxBridge.close();
        }
        catch(SQLException sqle) {
               this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
               sqle.printStackTrace();
        }
        catch(NullPointerException npe){
            npe.printStackTrace();
        }
    }
    
    private void tableClicked(java.awt.event.MouseEvent evt, String tableName) {                              
        //Detection of the user clicking any field on a table and storing its info to know which element the user wants to modify or remove
        //Also tracking if the user double clicks or double right-clicks as a shortcut to the modify or remove panel.
        JTable selTable = (JTable) evt.getSource();
        DefaultTableModel tModel = (DefaultTableModel) selTable.getModel();
        
        if(tableName.equals("")){}
        else{
            if(evt.getButton() == 1){
                if(evt.getClickCount() == 2){
                    int selRow = selTable.getSelectedRow();
                    int id, id2;
                    if(tableName.equals("Donation")){
                        String donorID = (String) selTable.getValueAt(selRow, 0);
                        id = Integer.parseInt(donorID.split("\\(")[1].split("\\)")[0]);

                        String resID = (String) selTable.getValueAt(selRow, 1);
                        id2 = Integer.parseInt(resID.split("\\(")[1].split("\\)")[0]);
                    }    
                    else{
                        id = (Integer) selTable.getValueAt(selRow, 0);
                        id2 = 0;
                    }

                    System.out.println("Row number " + selRow + " selected, ID collected: " + id);
                    
                    System.out.println("Double click, row editor launched.");
                    launchRowEditor(tableName, id, id2);
                }
            }
            else if(evt.getButton() == 3){
                
            }
        }
    }
    
    private void launchRowAdder(String tableName){
        try{
            ResultSet res;
            int newID;
            switch(tableName){
                case "Resource":
                    res = bridge.querier.executeQuery("SELECT MAX(ID) FROM Resource");
                    newID = 1 + res.getInt(1);
                    
                    ResAddIDInput.setText("" + newID);
                    ResAddIDInput.disable();
                    ShowResAdd();
                    break;
                case "Donor":
                    res = bridge.querier.executeQuery("SELECT MAX(ID) FROM Donor");
                    newID = 1 + res.getInt(1);
                    
                    DonorAddIDInput.setText("" + newID);
                    DonorAddIDInput.disable();
                    ShowDonorAdd();
                    break;
                case "Donation":
                    ShowDonaAdd();
                    break;
                case "Sale":
                    res = bridge.querier.executeQuery("SELECT MAX(ID) FROM Sale");
                    newID = 1 + res.getInt(1);
                    
                    SaleAddIDInput.setText("" + newID);
                    SaleAddIDInput.disable();
                    ShowSaleAdd();
                    break;
                default:
                    
                    break;
            }
        }
        catch(SQLException sqle){
            System.out.println("Ha ocurrido un error durante la interacción con la DB.");
            sqle.printStackTrace();
        }
    }
    
    private void launchRowEditor(String tableName, int id, int id2){
        try{
            ResultSet res;
            
            switch(tableName){
                case "Resource":
                    res = bridge.querier.executeQuery("SELECT * FROM Resource WHERE ID = " + id);
                    
                    ResModifyIDInput.setText(Integer.toString(res.getInt(1)) );
                    ResModifyIDInput.disable();
                    ResModifyNameInput.setText(res.getString(2));
                    ResModifyStockInput.setText(Long.toString(res.getLong(3)) );
                    
                    ShowResModify();
                    break;
                case "Donor":
                    res = bridge.querier.executeQuery("SELECT * FROM Donor WHERE ID = " + id);
                    
                    DonorModifyIDInput.setText(Integer.toString( res.getInt(1) ));
                    DonorModifyIDInput.disable();
                    DonorModifyNameInput.setText(res.getString(2));
                    DonorModifyRateInput.setText(Double.toString( res.getDouble(3) * 100));
                    
                    ShowDonorModify();
                    break;
                case "Donation":
                    res = bridge.querier.executeQuery("SELECT * FROM Donation WHERE donorID = " + id + " AND resID = " + id2);
                    
                    DonaModifyDonorInput.setText(Integer.toString( res.getInt(5) ));
                    DonaModifyResourceInput.setText(Integer.toString( res.getInt(4) ));
                    DonaModifyCuantityInput.setText(Long.toString( res.getLong(1) ));
                    DonaModifyPriceInput.setText(Integer.toString( res.getInt(2) ));
                    
                    ShowDonaModify();
                    break;
                case "Sale":
                    res = bridge.querier.executeQuery("SELECT * FROM Sale WHERE ID = " + id);
                    
                    SaleModifyIDInput.setText(Integer.toString( res.getInt(1) ));
                    SaleModifyIDInput.disable();
                    SaleModifyResourceInput.setText(Integer.toString( res.getInt(5) ));
                    SaleModifyCuantityInput.setText(Long.toString( res.getLong(2) ));
                    SaleModifyPriceInput.setText(Integer.toString( res.getInt(3) ));
                    
                    ShowSaleModify();
                    break;
                default:
                    this.mensaje("Información", "No se ha especificado una tabla que editar.", 1);
                    break;
            }
        }
        catch(SQLException sqle){
            System.out.println("Ha ocurrido un error durante la interacción con la DB.");
            sqle.printStackTrace();
        }
    }
    
    private void launchRowRemover(String tableName, int id, int id2){
        try{
            ResultSet res;
            
            switch(tableName){
                case "Resource":
                    res = bridge.querier.executeQuery("SELECT * FROM Resource WHERE ID = " + id);
                    
                    ResRemoveIDInput.setText(Integer.toString(res.getInt(1)) );
                    ResRemoveNameInput.setText(res.getString(2));
                    ResRemoveStockInput.setText(Long.toString(res.getLong(3)) );
                    
                    ResRemoveIDInput.disable();
                    ResRemoveNameInput.disable();
                    ResRemoveStockInput.disable();
                    
                    ShowResRemove();
                    break;
                case "Donor":
                    res = bridge.querier.executeQuery("SELECT * FROM Donor WHERE ID = " + id);
                    
                    DonorRemoveIDInput.setText(Integer.toString( res.getInt(1) ));
                    DonorRemoveNameInput.setText(res.getString(2));
                    DonorRemoveRateInput.setText(Long.toString( res.getLong(3) ));
                    
                    DonorRemoveIDInput.disable();
                    DonorRemoveNameInput.disable();
                    DonorRemoveRateInput.disable();
                    
                    ShowDonorRemove();
                    break;
                case "Donation":
                    res = bridge.querier.executeQuery("SELECT * FROM Donation WHERE donorID = " + id + " AND resID = " + id2);
                    
                    DonaRemoveDonorInput.setText(Integer.toString( res.getInt(5) ));
                    DonaRemoveResourceInput.setText(Integer.toString( res.getInt(4) ));
                    DonaRemoveCuantityInput.setText(Long.toString( res.getLong(1) ));
                    DonaRemovePriceInput.setText(Integer.toString( res.getInt(2) ));
                    
                    DonaRemoveDonorInput.disable();
                    DonaRemoveResourceInput.disable();
                    DonaRemoveCuantityInput.disable();
                    DonaRemovePriceInput.disable();
                    
                    ShowDonaRemove();
                    break;
                case "Sale":
                    res = bridge.querier.executeQuery("SELECT * FROM Sale WHERE ID = " + id);
                    
                    SaleRemoveIDInput.setText(Integer.toString( res.getInt(1) ));
                    SaleRemoveResourceInput.setText(Integer.toString( res.getInt(5) ));
                    SaleRemoveCuantityInput.setText(Integer.toString( res.getInt(2) ));
                    SaleRemovePriceInput.setText(Integer.toString( res.getInt(3) ));
                    
                    SaleRemoveIDInput.disable();
                    SaleRemoveResourceInput.disable();
                    SaleRemoveCuantityInput.disable();
                    SaleRemovePriceInput.disable();
                    
                    ShowSaleRemove();
                    break;
                default:
                    this.mensaje("Información", "No se ha especificado una tabla que editar.", 1);
                    break;
            }
        }
        catch(SQLException sqle){
            System.out.println("Ha ocurrido un error durante la interacción con la DB.");
            sqle.printStackTrace();
        }
    }
    
    
    
    private void insert(String tableName){
        UIManager.put("OptionPane.okButtonText", "Aceptar");
        UIManager.put("OptionPane.cancelButtonText", "Cancelar");
        int warn1 = JOptionPane.showConfirmDialog(null, "¿Está seguro de introducir esta\ninformación en la base de datos?", "Confirmación", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        int warn2;
        
        if(warn1 == 0){
            System.out.println("User chose option " + warn1 + ", operation confirmed");
            PreparedStatement insertSta;
            DateTimeFormatter date;
            LocalDateTime now;
            int id, price, donor, res;
            long stock, cuantity;
            double rate;
            String name, time;
            int exec = 0;
            
            switch(tableName){
                case "Resource":
                    id = Integer.parseInt(ResAddIDInput.getText());
                    name = ResAddNameInput.getText();
                    stock = Long.parseLong(ResAddStockInput.getText());
                    
                    System.out.println("User wants to insert a new Resource with ID " + id + ", named " + name + " and with an initial stock of " + stock);
                    
                    try{
                        insertSta = bridge.conn.prepareStatement("INSERT INTO Resource VALUES(?, ?, ?)");
                        insertSta.setInt(1, id);
                        insertSta.setString(2, name);
                        insertSta.setLong(3, stock);
                        
                        exec = insertSta.executeUpdate();
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    
                    ResAddIDInput.setText("");
                    ResAddNameInput.setText("");
                    ResAddStockInput.setText("");
                    break;
                case "Donor":
                    id = Integer.parseInt(DonorAddIDInput.getText());
                    name = DonorAddNameInput.getText();
                    rate = Double.parseDouble(DonorAddRateInput.getText()) / 100;
                    System.out.println("User wants to insert a new Donor with ID " + id + ", named " + name + " and with a sales rate of " + rate);
                    
                    try{
                        insertSta = bridge.conn.prepareStatement("INSERT INTO Donor VALUES(?, ?, ?)");
                        insertSta.setInt(1, id);
                        insertSta.setString(2, name);
                        insertSta.setDouble(3, rate);
                        
                        exec = insertSta.executeUpdate();
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    
                    DonorAddIDInput.setText("");
                    DonorAddNameInput.setText("");
                    DonorAddRateInput.setText("");
                    break;
                case "Donation":
                    donor = Integer.parseInt(DonaAddDonorInput.getText());
                    res = Integer.parseInt(DonaAddResourceInput.getText());
                    stock = Long.parseLong(DonaAddCuantityInput.getText());
                    price = Integer.parseInt(DonaAddPriceInput.getText());
                    
                    date = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    now = LocalDateTime.now();
                    System.out.println("User wants to insert a new Donation of donor nº " + donor + " and resource nº " + res + "."
                                     + "\nThe donated cuantity is " + stock + " set to not sell below " + price + "$."
                                     + "\nThis Donation was registered at " + date.format(now) + " GMT+1");
                                        
                    try{
                        insertSta = bridge.conn.prepareStatement("INSERT INTO Donation VALUES(?, ?, '" + date.format(now) + "', ?, ?)");
                        insertSta.setLong(1, stock);
                        insertSta.setInt(2, price);
                        
                        insertSta.setInt(3, res);
                        insertSta.setInt(4, donor);
                        
                        exec = insertSta.executeUpdate();
                            
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    
                    DonaAddDonorInput.setText("");
                    DonaAddResourceInput.setText("");
                    DonaAddCuantityInput.setText("");
                    DonaAddPriceInput.setText("");
                    break;
                case "Sale":
                    id = Integer.parseInt(SaleAddIDInput.getText());
                    res = Integer.parseInt(SaleAddResourceInput.getText());
                    stock = Long.parseLong(SaleAddCuantityInput.getText());
                    price = Integer.parseInt(SaleAddPriceInput.getText());
                    date = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    now = LocalDateTime.now();
                    System.out.println("User wants to insert a new Sale of " + stock + " of resource nº " + res + " at the price of " + price + "."
                                     + "\nThis Sale was registered at " + date.format(now) + "GMT+1");
                    
                    try{
                        insertSta = bridge.conn.prepareStatement("INSERT INTO Sale VALUES(?, ?, ?, '" + date.format(now) + "', ?)");
                        insertSta.setInt(1, id);
                        insertSta.setLong(2, stock);
                        insertSta.setInt(3, price);
                        
                        insertSta.setInt(4, res);
                        
                        exec = insertSta.executeUpdate();
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    
                    SaleAddIDInput.setText("");
                    SaleAddResourceInput.setText("");
                    SaleAddCuantityInput.setText("");
                    SaleAddPriceInput.setText("");
                    break;
                default:
                    this.mensaje("Error", "Error: El programa no ha podido indicar que tabla ha de ser modificada", 1);
                    break;
            }
            
            if(exec == 1){
                mensaje("Éxito", "Se han introducido los datos correctamente", 2);
            }
            else if(exec < 1){
                mensaje("Error", "No se han podido introducir los datos, inténtelo de nuevo.", 2);
            }
            else if(exec > 1){
                mensaje("Éxito (Error)", "Los datos se han introducido correctamente,\npero ha ocurrido algo inesperado.\n(Un total de " + exec + " líneas has sido afectadas)", 2);
            }
            
            switch(tableName){
                case "Resource":
                    ShowResTable();
                    break;
                case "Donor":
                    ShowDonorTable();
                    break;
                case "Donation":
                    ShowDonaTable();
                    break;
                case "Sale":
                    ShowSaleTable();
                    break;
                default:
                    resetVisibility();
                    break;
            }
        }
        else if(warn1 == 2){
            System.out.println("User chose option " + warn1 + ", operation rejected");
        }
        else{
            System.out.println("User did not chose an option and instead closed the dialog, operation uncorfirmed");
        }
    }
    
    private void modify(String tableName, int id1, int id2, String date){
        UIManager.put("OptionPane.okButtonText", "Aceptar");
        UIManager.put("OptionPane.cancelButtonText", "Cancelar");
        int warn1 = JOptionPane.showConfirmDialog(null, "¿Está seguro de modificar esta\ninformación de la base de datos?", "Confirmación", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        int warn2;
        
        if(warn1 == 0){
            System.out.println("User chose option " + warn1 + ", operation confirmed");
            PreparedStatement modifySta;
            int id, price, donor, res;
            long stock, cuantity;
            double rate;
            String name, time;
            int exec = 0;
            
            switch(tableName){
                case "Resource":
                    id = Integer.parseInt(ResModifyIDInput.getText());
                    name = ResModifyNameInput.getText();
                    stock = Long.parseLong(ResModifyStockInput.getText());
                    
                    System.out.println("User wants to update the Resource nº " + id + ", to be named " + name + " and a new stock of " + stock);
                    
                    try{
                        modifySta = bridge.conn.prepareStatement("UPDATE Resource SET "
                                                               + "ID  = ?, "
                                                               + "type = ?, "
                                                               + "stock  = ? "
                                                               + "WHERE ID = " + id1);

                        modifySta.setInt(1, id);
                        modifySta.setString(2, name);
                        modifySta.setLong(3, stock);
                        
                        exec = modifySta.executeUpdate();
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    break;
                case "Donor":
                    id = Integer.parseInt(DonorModifyIDInput.getText());
                    name = DonorModifyNameInput.getText();
                    rate = Double.parseDouble(DonorModifyRateInput.getText()) / 100;
                    System.out.println("User wants to update the Donor nº " + id + ", to be named " + name + " and a new rate of " + rate);
                    
                    try{
                        modifySta = bridge.conn.prepareStatement("UPDATE Donor SET "
                                                               + "ID = ?, "
                                                               + "name = ?, "
                                                               + "cRate = ?"
                                                               + "WHERE ID = " + id1);
                        
                        modifySta.setInt(1, id);
                        modifySta.setString(2, name);
                        modifySta.setDouble(3, rate);
                        
                        exec = modifySta.executeUpdate();
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    break;
                case "Donation":
                    try{
                        donor = Integer.parseInt(DonaModifyDonorInput.getText());
                        res = Integer.parseInt(DonaModifyResourceInput.getText());
                        stock = Long.parseLong(DonaModifyCuantityInput.getText());
                        price = Integer.parseInt(DonaModifyPriceInput.getText());
                        System.out.println("User wants to update a Donation from donor nº " + id1 + " of resource nº " + id2 + " made on " + date + " to have a cuantity of " + stock + " with a minimum price of " + price + ".");
                    
                    
                        modifySta = bridge.conn.prepareStatement("UPDATE Donation SET "
                                                               + "cuantity = ?, "
                                                               + "minPrice = ?, "
                                                               + "sendTime = ?, "
                                                               + "resID = ?, "
                                                               + "donorID = ? "
                                                               + "WHERE resID = " + id2 + " AND donorID = " + id1 + " AND sendTime = '" + date + "'");
                        
                        modifySta.setLong(1, stock);
                        modifySta.setInt(2, price);
                        modifySta.setString(3, date);
                        modifySta.setInt(4, res);
                        modifySta.setInt(5, donor);
                        
                        exec = modifySta.executeUpdate();
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    break;
                case "Sale":
                    try{
                        id = Integer.parseInt(SaleModifyIDInput.getText());
                        res = Integer.parseInt(SaleModifyResourceInput.getText());
                        stock = Long.parseLong(SaleModifyCuantityInput.getText());
                        price = Integer.parseInt(SaleModifyPriceInput.getText());
                        System.out.println("User wants to modify Sale nº " + id1 + " made on the " + date + " to be of resource nº " + res + ", for a final cuantity of " + stock + " and for a price of " + price + ".");
                    
                    
                        modifySta = bridge.conn.prepareStatement("UPDATE Sale SET "
                                                               + "ID = ?, "
                                                               + "cantidad = ?, "
                                                               + "precio = ?, "
                                                               + "sellTime = ?, "
                                                               + "resID = ? "
                                                               + "WHERE ID = " + id1 + " AND resID = " + id2);
                        modifySta.setInt(1, id);
                        modifySta.setLong(2, stock);
                        modifySta.setInt(3, price);
                        modifySta.setString(4, date);
                        modifySta.setInt(5, res);
                        
                        exec = modifySta.executeUpdate();
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    break;
                default:
                    this.mensaje("Error", "Error: El programa no ha podido indicar que tabla ha de ser modificada", 1);
                    break;
            }
            
            if(exec == 1){
                mensaje("Éxito", "Se han modficado los datos correctamente", 2);
            }
            else if(exec < 1){
                mensaje("Error", "No se han podido modificar los datos, inténtelo de nuevo.", 2);
            }
            else if(exec > 1){
                mensaje("Éxito (Error)", "Los datos se han modificado correctamente,\npero ha ocurrido algo inesperado.\n(Un total de " + exec + " líneas has sido afectadas)", 2);
            }
            
            switch(tableName){
                case "Resource":
                    ShowResTable();
                    break;
                case "Donor":
                    ShowDonorTable();
                    break;
                case "Donation":
                    ShowDonaTable();
                    break;
                case "Sale":
                    ShowSaleTable();
                    break;
                default:
                    resetVisibility();
                    break;
            }
        }
        else if(warn1 == 2){
            System.out.println("User chose option " + warn1 + ", operation rejected");
        }
        else{
            System.out.println("User did not chose an option and instead closed the dialog, operation uncorfirmed");
        }
    }
    
    private void remove(String tableName, int id1, int id2, String date){
        UIManager.put("OptionPane.okButtonText", "Aceptar");
        UIManager.put("OptionPane.cancelButtonText", "Cancelar");
        int warn1 = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar esta\ninformación de la base de datos?", "Confirmación", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        int warn2;
        
        if(warn1 == 0){
            System.out.println("User chose option " + warn1 + ", operation confirmed");
            int exec = 0;
            
            switch(tableName){
                case "Resource":
                    try{
                        exec = bridge.querier.executeUpdate("DELETE FROM Resource WHERE ID = " + id1);
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    break;
                    
                case "Donor":
                    try{
                        exec = bridge.querier.executeUpdate("DELETE FROM Donor WHERE ID = " + id1);
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    break;
                    
                case "Donation":
                    try{
                        exec = bridge.querier.executeUpdate("DELETE FROM Donation WHERE resID = " + id1 + " AND donorID = " + id2 + " AND sendTime = '" + date + "'");
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    break;
                    
                case "Sale":
                    try{
                        exec = bridge.querier.executeUpdate("DELETE FROM Sale WHERE ID = " + id1);
                    }
                    catch(SQLException sqle) {
                        this.mensaje("Información","Error SQL: " + sqle.getMessage(),1);
                        sqle.printStackTrace();
                    }
                    break;
                default:
                    this.mensaje("Error", "Error: El programa no ha podido indicar que tabla ha de ser modificada", 1);
                    break;
            }
            
            if(exec == 1){
                mensaje("Éxito", "Se han eliminado los datos correctamente", 2);
            }
            else if(exec < 1){
                mensaje("Error", "No se han podido modificar los datos, inténtelo de nuevo.", 2);
            }
            else if(exec > 1){
                mensaje("Éxito (Error)", "Los datos se han modificado correctamente,\npero ha ocurrido algo inesperado.\n(Un total de " + exec + " líneas has sido afectadas)", 2);
            }
            
            switch(tableName){
                case "Resource":
                    ShowResTable();
                    break;
                case "Donor":
                    ShowDonorTable();
                    break;
                case "Donation":
                    ShowDonaTable();
                    break;
                case "Sale":
                    ShowSaleTable();
                    break;
                default:
                    resetVisibility();
                    break;
            }
        }
        else if(warn1 == 2){
            System.out.println("User chose option " + warn1 + ", operation rejected");
        }
        else{
            System.out.println("User did not chose an option and instead closed the dialog, operation uncorfirmed");
        }
    }
    
    private void mensaje(String titulo, String m,int tipo){
        int tipoerr;
        switch(tipo) {
            case 1:  
                tipoerr = JOptionPane.ERROR_MESSAGE; 
                break;
            case 2: 
                tipoerr = JOptionPane.INFORMATION_MESSAGE; 
                break;
            case 3:
                tipoerr = JOptionPane.WARNING_MESSAGE;
                break;
            case 4:
                tipoerr = JOptionPane.QUESTION_MESSAGE;
                break;
            default:
                tipoerr = 1;
        }
        
        JOptionPane.showMessageDialog(null, m, titulo, tipoerr);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try{
                    MainW main = new MainW();
                    main.setVisible(true);
                    main.setLocationRelativeTo(null);
                    
                }
                catch(IOException e){
                    e.getMessage();
                }
            }
        });
    }
    
    SQLBridge bridge;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DonaAddCancelBut;
    private javax.swing.JButton DonaAddConfirmBut;
    private javax.swing.JTextField DonaAddCuantityInput;
    private javax.swing.JLabel DonaAddCuantityLabel;
    private javax.swing.JTextField DonaAddDonorInput;
    private javax.swing.JLabel DonaAddDonorLabel;
    private javax.swing.JPanel DonaAddHeavenPanel;
    private javax.swing.JPanel DonaAddHellPanel;
    private javax.swing.JSeparator DonaAddLateralSeparator;
    private javax.swing.JPanel DonaAddPane;
    private javax.swing.JTextField DonaAddPriceInput;
    private javax.swing.JLabel DonaAddPriceLabel;
    private javax.swing.JTextField DonaAddResourceInput;
    private javax.swing.JLabel DonaAddResourceLabel;
    private javax.swing.JButton DonaModifyCancelBut;
    private javax.swing.JButton DonaModifyConfirmBut;
    private javax.swing.JTextField DonaModifyCuantityInput;
    private javax.swing.JLabel DonaModifyCuantityLabel;
    private javax.swing.JTextField DonaModifyDonorInput;
    private javax.swing.JLabel DonaModifyDonorLabel;
    private javax.swing.JPanel DonaModifyHeavenPanel;
    private javax.swing.JPanel DonaModifyHellPanel;
    private javax.swing.JSeparator DonaModifyLateralSeparator;
    private javax.swing.JPanel DonaModifyPane;
    private javax.swing.JTextField DonaModifyPriceInput;
    private javax.swing.JLabel DonaModifyPriceLabel;
    private javax.swing.JTextField DonaModifyResourceInput;
    private javax.swing.JLabel DonaModifyResourceLabel;
    private javax.swing.JButton DonaRemoveCancelBut;
    private javax.swing.JButton DonaRemoveConfirmBut;
    private javax.swing.JTextField DonaRemoveCuantityInput;
    private javax.swing.JLabel DonaRemoveCuantityLabel;
    private javax.swing.JTextField DonaRemoveDonorInput;
    private javax.swing.JLabel DonaRemoveDonorLabel;
    private javax.swing.JPanel DonaRemoveHeavenPanel;
    private javax.swing.JPanel DonaRemoveHellPanel;
    private javax.swing.JSeparator DonaRemoveLateralSeparator;
    private javax.swing.JPanel DonaRemovePane;
    private javax.swing.JTextField DonaRemovePriceInput;
    private javax.swing.JLabel DonaRemovePriceLabel;
    private javax.swing.JTextField DonaRemoveResourceInput;
    private javax.swing.JLabel DonaRemoveResourceLabel;
    private javax.swing.JTable DonaTable;
    private javax.swing.JButton DonaTableAddBut;
    private javax.swing.JButton DonaTableBackBut;
    private javax.swing.JTextField DonaTableDateSearchText;
    private javax.swing.JTextField DonaTableDonorSearchText;
    private javax.swing.JPanel DonaTableLateralPanel;
    private javax.swing.JTextField DonaTableMaterialSearchText;
    private javax.swing.JMenu DonaTableMenu;
    private javax.swing.JButton DonaTableModifyBut;
    private javax.swing.JPanel DonaTablePane;
    private javax.swing.JButton DonaTableRemoveBut;
    private javax.swing.JScrollPane DonaTableScrollPane;
    private javax.swing.JSeparator DonaTableSeparator;
    private javax.swing.JButton DonorAddCancelBut;
    private javax.swing.JButton DonorAddConfirmBut;
    private javax.swing.JPanel DonorAddHeavenPanel;
    private javax.swing.JPanel DonorAddHellPanel;
    private javax.swing.JTextField DonorAddIDInput;
    private javax.swing.JLabel DonorAddIDLabel;
    private javax.swing.JSeparator DonorAddLateralSeparator;
    private javax.swing.JTextField DonorAddNameInput;
    private javax.swing.JLabel DonorAddNameLabel;
    private javax.swing.JPanel DonorAddPane;
    private javax.swing.JTextField DonorAddRateInput;
    private javax.swing.JLabel DonorAddRateLabel;
    private javax.swing.JButton DonorModifyCancelBut;
    private javax.swing.JButton DonorModifyConfirmBut;
    private javax.swing.JPanel DonorModifyHeavenPanel;
    private javax.swing.JPanel DonorModifyHellPanel;
    private javax.swing.JTextField DonorModifyIDInput;
    private javax.swing.JLabel DonorModifyIDLabel;
    private javax.swing.JSeparator DonorModifyLateralSeparator;
    private javax.swing.JTextField DonorModifyNameInput;
    private javax.swing.JLabel DonorModifyNameLabel;
    private javax.swing.JPanel DonorModifyPane;
    private javax.swing.JTextField DonorModifyRateInput;
    private javax.swing.JLabel DonorModifyRateLabel;
    private javax.swing.JButton DonorRemoveCancelBut;
    private javax.swing.JButton DonorRemoveConfirmBut;
    private javax.swing.JPanel DonorRemoveHeavenPanel;
    private javax.swing.JPanel DonorRemoveHellPanel;
    private javax.swing.JTextField DonorRemoveIDInput;
    private javax.swing.JLabel DonorRemoveIDLabel;
    private javax.swing.JSeparator DonorRemoveLateralSeparator;
    private javax.swing.JTextField DonorRemoveNameInput;
    private javax.swing.JLabel DonorRemoveNameLabel;
    private javax.swing.JPanel DonorRemovePane;
    private javax.swing.JLabel DonorRemoveQuestion2Label;
    private javax.swing.JLabel DonorRemoveQuestionLabel;
    private javax.swing.JRadioButton DonorRemoveRadioNoBut;
    private javax.swing.JRadioButton DonorRemoveRadioYesBut;
    private javax.swing.JTextField DonorRemoveRateInput;
    private javax.swing.JLabel DonorRemoveRateLabel;
    private javax.swing.JTable DonorTable;
    private javax.swing.JButton DonorTableAddBut;
    private javax.swing.JButton DonorTableBackBut;
    private javax.swing.JTextField DonorTableIDSearchText;
    private javax.swing.JPanel DonorTableLateralPanel;
    private javax.swing.JMenu DonorTableMenu;
    private javax.swing.JButton DonorTableModifyBut;
    private javax.swing.JTextField DonorTableNomSearchText;
    private javax.swing.JPanel DonorTablePane;
    private javax.swing.JButton DonorTableRemoveBut;
    private javax.swing.JScrollPane DonorTableScrollPane;
    private javax.swing.JSeparator DonorTableSeparator;
    private javax.swing.JLabel MainMenuIconLabel;
    private javax.swing.JPanel MainMenuPane;
    private javax.swing.JLayeredPane MainWLayerPane;
    private javax.swing.JMenuBar MainWMenuBar;
    private javax.swing.JButton ResAddCancelBut;
    private javax.swing.JButton ResAddConfirmBut;
    private javax.swing.JPanel ResAddHeavenPanel;
    private javax.swing.JPanel ResAddHellPanel;
    private javax.swing.JTextField ResAddIDInput;
    private javax.swing.JLabel ResAddIDLabel;
    private javax.swing.JTextField ResAddNameInput;
    private javax.swing.JLabel ResAddNameLabel;
    private javax.swing.JPanel ResAddPane;
    private javax.swing.JSeparator ResAddSeparator;
    private javax.swing.JTextField ResAddStockInput;
    private javax.swing.JLabel ResAddStockLabel;
    private javax.swing.JButton ResModifyCancelBut;
    private javax.swing.JButton ResModifyConfirmBut;
    private javax.swing.JPanel ResModifyHeavenPanel;
    private javax.swing.JPanel ResModifyHellPanel;
    private javax.swing.JTextField ResModifyIDInput;
    private javax.swing.JLabel ResModifyIDLabel;
    private javax.swing.JTextField ResModifyNameInput;
    private javax.swing.JLabel ResModifyNameLabel;
    private javax.swing.JPanel ResModifyPane;
    private javax.swing.JSeparator ResModifySeparator;
    private javax.swing.JTextField ResModifyStockInput;
    private javax.swing.JLabel ResModifyStockLabel;
    private javax.swing.JButton ResRemoveCancelBut;
    private javax.swing.JButton ResRemoveConfirmBut;
    private javax.swing.JPanel ResRemoveHeavenPanel;
    private javax.swing.JPanel ResRemoveHellPanel;
    private javax.swing.JTextField ResRemoveIDInput;
    private javax.swing.JLabel ResRemoveIDLabel;
    private javax.swing.JTextField ResRemoveNameInput;
    private javax.swing.JLabel ResRemoveNameLabel;
    private javax.swing.JPanel ResRemovePane;
    private javax.swing.JLabel ResRemoveQuestion2Label;
    private javax.swing.JLabel ResRemoveQuestionLabel;
    private javax.swing.JRadioButton ResRemoveRadioNoBut;
    private javax.swing.JRadioButton ResRemoveRadioYesBut;
    private javax.swing.JSeparator ResRemoveSeparator;
    private javax.swing.JTextField ResRemoveStockInput;
    private javax.swing.JLabel ResRemoveStockLabel;
    private javax.swing.JTable ResTable;
    private javax.swing.JButton ResTableAddBut;
    private javax.swing.JButton ResTableBackBut;
    private javax.swing.JPanel ResTableLateralPanel;
    private javax.swing.JMenu ResTableMenu;
    private javax.swing.JButton ResTableModifyBut;
    private javax.swing.JPanel ResTablePane;
    private javax.swing.JButton ResTableRemoveBut;
    private javax.swing.JScrollPane ResTableScrollPane;
    private javax.swing.JSeparator ResTableSeparator;
    private javax.swing.JButton SaleAddCancelBut;
    private javax.swing.JButton SaleAddConfirmBut;
    private javax.swing.JTextField SaleAddCuantityInput;
    private javax.swing.JLabel SaleAddCuantityLabel;
    private javax.swing.JPanel SaleAddHeavenPanel;
    private javax.swing.JPanel SaleAddHellPanel;
    private javax.swing.JTextField SaleAddIDInput;
    private javax.swing.JLabel SaleAddIDLabel;
    private javax.swing.JSeparator SaleAddLateralSeparator;
    private javax.swing.JPanel SaleAddPane;
    private javax.swing.JTextField SaleAddPriceInput;
    private javax.swing.JLabel SaleAddPriceLabel;
    private javax.swing.JTextField SaleAddResourceInput;
    private javax.swing.JLabel SaleAddResourceLabel;
    private javax.swing.JButton SaleModifyCancelBut;
    private javax.swing.JButton SaleModifyConfirmBut;
    private javax.swing.JTextField SaleModifyCuantityInput;
    private javax.swing.JLabel SaleModifyCuantityLabel;
    private javax.swing.JPanel SaleModifyHeavenPanel;
    private javax.swing.JPanel SaleModifyHellPanel;
    private javax.swing.JTextField SaleModifyIDInput;
    private javax.swing.JLabel SaleModifyIDLabel;
    private javax.swing.JSeparator SaleModifyLateralSeparator;
    private javax.swing.JPanel SaleModifyPane;
    private javax.swing.JTextField SaleModifyPriceInput;
    private javax.swing.JLabel SaleModifyPriceLabel;
    private javax.swing.JTextField SaleModifyResourceInput;
    private javax.swing.JLabel SaleModifyResourceLabel;
    private javax.swing.JButton SaleRemoveCancelBut;
    private javax.swing.JButton SaleRemoveConfirmBut;
    private javax.swing.JTextField SaleRemoveCuantityInput;
    private javax.swing.JLabel SaleRemoveCuantityLabel;
    private javax.swing.JPanel SaleRemoveHeavenPanel;
    private javax.swing.JPanel SaleRemoveHellPanel;
    private javax.swing.JTextField SaleRemoveIDInput;
    private javax.swing.JLabel SaleRemoveIDLabel;
    private javax.swing.JSeparator SaleRemoveLateralSeparator;
    private javax.swing.JPanel SaleRemovePane;
    private javax.swing.JTextField SaleRemovePriceInput;
    private javax.swing.JLabel SaleRemovePriceLabel;
    private javax.swing.JTextField SaleRemoveResourceInput;
    private javax.swing.JLabel SaleRemoveResourceLabel;
    private javax.swing.JTable SaleTable;
    private javax.swing.JButton SaleTableAddBut;
    private javax.swing.JButton SaleTableBackBut;
    private javax.swing.JTextField SaleTableFechaSearchInput;
    private javax.swing.JPanel SaleTableLateralPanel;
    private javax.swing.JMenu SaleTableMenu;
    private javax.swing.JButton SaleTableModifyBut;
    private javax.swing.JPanel SaleTablePane;
    private javax.swing.JButton SaleTableRemoveBut;
    private javax.swing.JTextField SaleTableResourceSearchInput;
    private javax.swing.JScrollPane SaleTableScrollPane;
    private javax.swing.JSeparator SaleTableSeparator;
    // End of variables declaration//GEN-END:variables

}
